<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>const int THRESHOLD_SEND_TO_CONVOY = 75;
const int CONVOYS_EQUALITY = 5;
const int THRESHOLD_SEND_TO_STATION_UPPER = 50;
const int THRESHOLD_SEND_TO_STATION_LOWER = 25;
const int THRESHOLD_GATHER_DATA = 50;
const int NO_TASK = -1;
const int GATHER_DATA = 0;
const int SEND_TO_STATION = 1;
const int SEND_TO_CONVOY = 2;
const int RECIEVE_FROM_CONVOY = 3;
const int OPEN_WINDOW = 1;
const int NO_WINDOW_DEPENDENCY = -1;
const bool IDLE_ALLOWED = false;
int int_clock = 0;
//UTILITY METHODS
const int MAX_VALUE = 9999;

//STATIONS
//Generated wih python script using TLE
const int STATION_INDEX = 34; // changes for; when station are in range
const int STATIONS = 3; // amount of windows i.e. stations to which can be communicated
const int STATION_ATTRI = 3; // elements discribing window
// Start_time, End_time, active or not
const int OVER_STATION[STATION_INDEX][STATIONS][STATION_ATTRI] = {
{{0, 25, 1}, {0, 25, 1}, {0, 25, 1}},
{{26, 50, 0}, {26, 50, 1}, {26, 50, 0}},
{{51, 75, 0}, {51, 75, 0}, {51, 75, 1}},
{{76, 100, 1}, {76, 100, 1}, {76, 100, 1}},
{{157, 227, 1}, {177, 207, 1}, {117, 181, 0}},
{{228, 245, 0}, {208, 265, 0}, {182, 204, 1}},
{{246, 316, 1}, {266, 295, 1}, {205, 269, 0}},
{{317, 333, 0}, {296, 353, 0}, {270, 292, 1}},
{{334, 404, 1}, {354, 383, 1}, {293, 357, 0}},
{{405, 421, 0}, {384, 441, 0}, {358, 380, 1}},
{{422, 492, 1}, {442, 472, 1}, {381, 446, 0}},
{{493, 510, 0}, {473, 530, 0}, {447, 469, 1}},
{{511, 581, 1}, {531, 560, 1}, {470, 534, 0}},
{{582, 598, 0}, {561, 618, 0}, {535, 557, 1}},
{{599, 669, 1}, {619, 648, 1}, {558, 622, 0}},
{{670, 686, 0}, {649, 706, 0}, {623, 645, 1}},
{{687, 757, 1}, {707, 736, 1}, {646, 711, 0}},
{{758, 775, 0}, {737, 795, 0}, {712, 734, 1}},
{{776, 846, 1}, {796, 825, 1}, {735, 799, 0}},
{{847, 863, 0}, {826, 883, 0}, {800, 822, 1}},
{{864, 934, 1}, {884, 913, 1}, {823, 887, 0}},
{{935, 951, 0}, {914, 971, 0}, {888, 910, 1}},
{{952, 1022, 1}, {972, 1001, 1}, {911, 975, 0}},
{{1023, 1040, 0}, {1002, 1059, 0}, {976, 999, 1}},
{{1041, 1111, 1}, {1060, 1090, 1}, {1000, 1064, 0}},
{{1112, 1128, 0}, {1091, 1148, 0}, {1065, 1087, 1}},
{{1129, 1199, 1}, {1149, 1178, 1}, {1088, 1152, 0}},
{{1200, 1216, 0}, {1179, 1236, 0}, {1153, 1175, 1}},
{{1217, 1287, 1}, {1237, 1266, 1}, {1176, 1240, 0}},
{{1288, 1305, 0}, {1267, 1324, 0}, {1241, 1264, 1}},
{{1306, 1376, 1}, {1325, 1355, 1}, {1265, 1329, 0}},
{{1377, 1393, 0}, {1356, 1413, 0}, {1330, 1352, 1}},
{{1394, 1440, 1}, {1414, 1440, 1}, {1353, 1417, 0}},
{{0, 9999, 0}, {0, 9999, 0}, {1418, 9999, 1}}};

typedef struct {
	int cost;
	int data_recieved;
} StationDescription;

// #Station0 // #Station1 // #Station2
StationDescription stations[STATIONS] = {{2,0},{4,0},{8,0}};
const int STATION_ZEROS[STATIONS] = {0,0,0};

//CONVOYS
const int CONVOYS = 3;
typedef int[0, CONVOYS - 1] id_t;
const int CONVOY_ZEROS[CONVOYS] = {0,0,0};
const int PROCESSORS = 10;
const int TASKS = 4;
const int TASKS_ZEROS[TASKS] = {0,0,0,0};
typedef struct {
	int processors; // Number of task the convoy is allowed to perform in parallel
	int gather_data;
	int storage;
	//Describe the relation between tasks and stations
	int tasks_depending_on_window[TASKS][STATIONS];
} ConvoyDescription;
typedef struct {
	int task_type;
	int execution_time;
	int data_rate;
} TaskDescription;
// #Convoy1
const ConvoyDescription convoys[CONVOYS] = {{9, 9, 750, {{1,0,0},{0,0,1},{-1,-1,-1},{-1,-1,-1}}}, 
					    {9, 9, 1000, {{0,0,1},{0,1,0},{-1,-1,-1},{-1,-1,-1}}},
					    {9, 9, 1500, {{0,1,0},{1,0,0},{-1,-1,-1},{-1,-1,-1}}}};
// #0 Gather data  // #1 Send to station // #2 Send to convoy
const TaskDescription tasks[TASKS] = {{0,15, 2},{1,15, 8},{2,15,4}, {3,15,4}};
// Observe storage on each of the convoys
int storages[CONVOYS] = CONVOY_ZEROS;


//SATELLITES
typedef struct {
	int storage;
	int offset;
	int station_indexes[STATIONS];
	int task_type;
	int execution_time;
	int to;
	int to_satellite;
} SatDescription;


//Value determines how many minutes each satellites are apart from one another.
const int OFFSET_BETWEEN_SATELLITE = 5;
const int STORAGE = 500;
SatDescription sat_array[CONVOYS][PROCESSORS];

//SCHEDULER
int current_task;
int proc_in_use[CONVOYS] = CONVOY_ZEROS;
int gather_in_use[CONVOYS] = CONVOY_ZEROS;
int send_to_station[CONVOYS][STATIONS] = {STATION_ZEROS, STATION_ZEROS, STATION_ZEROS};
int send_to_convoy[CONVOYS][CONVOYS] = {CONVOY_ZEROS, CONVOY_ZEROS, CONVOY_ZEROS} ;
int recieve_from_convoys[CONVOYS][CONVOYS] = {CONVOY_ZEROS, CONVOY_ZEROS, CONVOY_ZEROS};
const int schedule_length = 1050;

//CHANNELS
broadcast chan suggest_task, assign_send_tasks, assign_rest, move;
//CLOCKS
clock TotalTime;

//Bools used to deadlock if constrains are violated
bool illegal_move = false;
bool execution_being_negative = false;
bool storage_overflow = false;
bool storage_underflow = false;
bool idle = false;



int obs_gather_cost[CONVOYS] = CONVOY_ZEROS;
int obs_sender_station_cost[CONVOYS] = CONVOY_ZEROS;
int obs_sender_convoy_cost[CONVOYS] = CONVOY_ZEROS;
int calculated_cost = 0;

//OBSERVABLE VARIABLES
int total_runs[CONVOYS][4] = {{0,0,0,0}, {0,0,0,0}, {0,0,0,0}}; 
int total_convoy_recived[CONVOYS] = CONVOY_ZEROS;
int total_convoy_send[CONVOYS] = CONVOY_ZEROS;

void init_sats(){
	int c,p,s;
	for (c = 0; c &lt; CONVOYS; c++){
		for (p = 0; p &lt; PROCESSORS; p++){
			if (convoys[c].processors &lt;= p){
				sat_array[c][p].storage = -1;
			}
			sat_array[c][p].offset = OFFSET_BETWEEN_SATELLITE*p;
			sat_array[c][p].task_type = -1;
			sat_array[c][p].execution_time = MAX_VALUE;
			sat_array[c][p].to = -1;
			for (s = 0; s &lt; STATIONS; s++){
				sat_array[c][p].station_indexes[s] = 0;
			}
		}
	}
}

void initialize(){
	init_sats();
}
</declaration><template><name>Scheduler</name><declaration>clock time;
int lowest;



int tm = MAX_VALUE;
int window_count = 0;

//Look at the stations to see how much time needs to be advanced before a window change appears.
int nearest_window(){
	int s, c, p;
	tm = MAX_VALUE;
	for (s = 0; s &lt; STATIONS; s++){
		for (c = 0; c &lt; CONVOYS; c++){
			for(p = 0; p &lt; convoys[c].processors; p++){
				if (tm &gt; OVER_STATION[sat_array[c][p].station_indexes[s]][s][1]){
					tm = OVER_STATION[sat_array[c][p].station_indexes[s]][s][1];
				}
			}
		}
	}
	return tm-int_clock;
}

//Sets the lowest variable equal to the lowest amount of time before any of the tasks finishes.
void closest_task_to_finish(){	
	int c, p;
	lowest = MAX_VALUE;	
	for (c = 0; c &lt; CONVOYS; c++){
		for (p = 0; p &lt; convoys[c].processors; p++){
			if (sat_array[c][p].execution_time &lt; lowest){
				lowest = sat_array[c][p].execution_time;
			}
		}
	}
	if (lowest == MAX_VALUE){
		idle = true;
		window_count++;
		lowest = nearest_window();
	}
}

//Updates the processors lists, and free processes if they have finshed their task.
void update_processors(){
	int c, p;
	for (c = 0; c &lt; CONVOYS; c++){
		for (p = 0; p &lt; convoys[c].processors; p++){
			if (sat_array[c][p].task_type != NO_TASK){
				sat_array[c][p].execution_time -= lowest;
			}
			if (sat_array[c][p].execution_time == 0){
				if (sat_array[c][p].to != -1 &amp;&amp; sat_array[c][p].task_type == SEND_TO_STATION){
					send_to_station[c][sat_array[c][p].to]--;
				}
				else if (sat_array[c][p].to != -1 &amp;&amp; sat_array[c][p].task_type == SEND_TO_CONVOY){
					send_to_convoy[c][sat_array[c][p].to]--;
				}
				else if (sat_array[c][p].task_type == GATHER_DATA){
					gather_in_use[c]--;
				}
				else if (sat_array[c][p].to != -1 &amp;&amp; sat_array[c][p].task_type == RECIEVE_FROM_CONVOY){
					send_to_convoy[c][sat_array[c][p].to]--;
				}
				proc_in_use[c]--;
				sat_array[c][p].to = -1;
				sat_array[c][p].task_type = -1;
				sat_array[c][p].execution_time = MAX_VALUE;
			}
			else if (sat_array[c][p].execution_time &lt; 0 &amp;&amp; sat_array[c][p].task_type != NO_TASK){
				execution_being_negative = true;
			}
		}
	}
}
//Updates the storages for each convoy based of the amount of time moved and number of processors performed tasks that effect storage.
void update_storage(){
	int c, p;
	for (c = 0; c &lt; CONVOYS; c++){
		for (p = 0; p &lt; convoys[c].processors; p++){
			if (sat_array[c][p].task_type == GATHER_DATA){
				sat_array[c][p].storage += tasks[GATHER_DATA].data_rate * lowest;
				if (sat_array[c][p].storage &gt; STORAGE){
					storage_overflow = true;
				}
			}
			else if (sat_array[c][p].task_type == SEND_TO_STATION){
				sat_array[c][p].storage -= tasks[SEND_TO_STATION].data_rate * lowest;
				if (sat_array[c][p].storage &lt; 0){
					storage_underflow = true;
				}
			}
			else if (sat_array[c][p].task_type == SEND_TO_CONVOY){
				sat_array[c][p].storage -= tasks[SEND_TO_CONVOY].data_rate * lowest;
				if (sat_array[c][p].storage &lt; 0){
					storage_underflow = true;
				}
			}
			else if (sat_array[c][p].task_type == RECIEVE_FROM_CONVOY){
				sat_array[c][p].storage += tasks[RECIEVE_FROM_CONVOY].data_rate * lowest;
				if (sat_array[c][p].storage &gt; STORAGE){
					storage_overflow = true;
				}
			}
		}
	}
}






//Enforces that scheduler is less likely to idle to reduce state-space
bool check_idle(){
	if (!IDLE_ALLOWED &amp;&amp; idle){
		illegal_move = true;
		return false;
	}
	else if (!IDLE_ALLOWED &amp;&amp; !idle){
		return true;
	}
	else if (IDLE_ALLOWED &amp;&amp; idle){
		calculated_cost += 1000;
		idle = false;
		return true;
	}
	else if (IDLE_ALLOWED &amp;&amp; !idle){
		return true;
	}
	return true;
}

//Check if the scheduler has made a move that result in either storage under- or over-flowing, and more.
bool check_constrains(){
	if (illegal_move){
		return false;
	}
	else if (execution_being_negative){
		return false;
	}
	else if (storage_overflow){
		return false;
	}
	else if (storage_underflow){
		return false;
	}
	return true;
}

//Increment the s_indexes to look at the correct windows.
void update_windows(){
	int s, c, p;
	for (s = 0; s &lt; STATIONS; s++){
		for (c = 0; c &lt; CONVOYS; c++){
			for (p = 0; p &lt; convoys[c].processors; p++){
				while(OVER_STATION[sat_array[c][p].station_indexes[s]][s][1] &lt; int_clock){
					sat_array[c][p].station_indexes[s]++;
				}	
			}
		}
	}
}
</declaration><location id="id0" x="-552" y="64"></location><location id="id1" x="-112" y="-16"><committed/></location><location id="id2" x="-368" y="-16"><committed/></location><location id="id3" x="-552" y="-16"><committed/></location><location id="id4" x="-256" y="184"><label kind="invariant" x="-464" y="192">time &lt;= lowest &amp;&amp;
TotalTime &lt; schedule_length &amp;&amp;
lowest != 0 &amp;&amp;
check_constrains() &amp;&amp;
cost '== calculated_cost</label></location><location id="id5" x="-480" y="-72"><committed/></location><location id="id6" x="-256" y="-16"><committed/></location><init ref="id1"/><transition><source ref="id3"/><target ref="id0"/><label kind="synchronisation" x="-596" y="9">assign_rest!</label></transition><transition><source ref="id1"/><target ref="id6"/><label kind="assignment" x="-216" y="-16">initialize(),
current_task = 1</label></transition><transition><source ref="id2"/><target ref="id3"/><label kind="synchronisation" x="-512" y="-40">assign_send_tasks!</label></transition><transition><source ref="id0"/><target ref="id4"/><label kind="assignment" x="-472" y="128">time = 0,
closest_task_to_finish()</label><nail x="-552" y="184"/></transition><transition><source ref="id5"/><target ref="id6"/><label kind="synchronisation" x="-456" y="-160">move!</label><label kind="assignment" x="-456" y="-136">current_task++</label><nail x="-480" y="-136"/><nail x="-256" y="-136"/></transition><transition><source ref="id4"/><target ref="id6"/><label kind="guard" x="-392" y="32">time == lowest</label><label kind="assignment" x="-392" y="48">current_task = 1,
int_clock += lowest,
update_storage(),
update_processors(),
update_windows(),
check_idle()</label></transition><transition><source ref="id6"/><target ref="id2"/><label kind="guard" x="-372" y="-46">current_task == TASKS-1</label><label kind="assignment" x="-384" y="-8">calculated_cost = 0</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="guard" x="-456" y="-96">current_task != TASKS-1</label><label kind="synchronisation" x="-456" y="-112">suggest_task!</label><nail x="-272" y="-72"/></transition></template><template><name>Convoy</name><parameter>const id_t id</parameter><declaration>//Used in accept_suggestion(), reject_suggestion(), and lastly used in add_tasks()
int decisions[TASKS] = {1, 0, 0, 0};

//Indicate that the convoy will execute the task
void accept_suggestion(){
	decisions[current_task] = 1;
}

//Indicate that the convoy will not execute the specifyed task
void reject_suggestion(){
	decisions[current_task] = 0;
}
//Calculates how many processors need to be assigned to the accepted tasks
int amount_of_tasks_to_execute(int t){
	if (t == GATHER_DATA &amp;&amp; obs_gather_cost[id] != 0){
		return (obs_gather_cost[id]*(convoys[id].processors - proc_in_use[id]))/(obs_gather_cost[id] + obs_sender_station_cost[id] + obs_sender_convoy_cost[id]);
	}
	else if (t == SEND_TO_STATION &amp;&amp; obs_sender_station_cost[id] != 0){
		return (obs_sender_station_cost[id]*(convoys[id].processors - proc_in_use[id]))/(obs_gather_cost[id] + obs_sender_station_cost[id] + obs_sender_convoy_cost[id]);
	}
	else if (t == 2 &amp;&amp; obs_sender_convoy_cost[id] != 0){
		return (obs_sender_convoy_cost[id]*(convoys[id].processors - proc_in_use[id]))/(obs_gather_cost[id] + obs_sender_station_cost[id] + obs_sender_convoy_cost[id]);
	}
	else{
		return 1;
	}
}

//Finds the lowest cost from the available stations and return the index position of the station
int cheapest_available_station(){
	int s;
	int lowest = MAX_VALUE;
	int position = 0;
/*	for (s = 0; s &lt; STATIONS; s++){
		if (convoys[id].send_to_station[s] &gt; send_to_station[id][s]){
			if (stations[s].cost &lt; lowest){
				lowest = stations[s].cost;
				position = s;
			}
		}
	}
	if (lowest == MAX_VALUE){
		position = MAX_VALUE;
	}*/
	return position;	
}

//Finds the convoy with the lowest amount of storage in relation to its maximum cappacity and returns the index position of the convoy
int lowest_available_convoy(){
	int c;
	int lowest = MAX_VALUE;
	int position = 0;
/*	for (c = 0; c &lt; CONVOYS; c++){
		if(convoys[id].send_to_convoy[c] &gt; send_to_convoy[id][c] &amp;&amp; c != id){
			if (storages[c] &lt; lowest){
				lowest = storages[c];
				position = c;
			}
		}
	}
	if (lowest == MAX_VALUE){
		position = MAX_VALUE;
	}*/
	return position;
}

//Check if the convoy can execute the task, identifyed by the parameter task_id to see if they are depending on a window and check we the convoy is within set window.
bool task_within_station(int task_id){
	int s;
	for (s = 0; s &lt; STATIONS; s++){
		if (convoys[id].tasks_depending_on_window[task_id][s] || convoys[id].tasks_depending_on_window[task_id][s] == -1){
			return true;
		}
	}
	return false;
}

//Used by add_tasks(), this adds the tasks to the convoys processor list, based on the given parameter.
/*int insert_task(TaskDescription item, int local_id){
	int p, station_index, convoy_index;
	if (local_id == -1){
		local_id = id;
	}
	for(p = 0; p &lt; convoys[local_id].processors; p++){
		if (sat_array[local_id][p].task_type == NO_TASK  &amp;&amp; task_within_station(item.task_type)){
			if (item.task_type == GATHER_DATA){
				proc_in_use[local_id]++;
				sat_array[local_id][p].task_type = item.task_type;
				sat_array[local_id][p].execution_time = item.execution_time;
				sat_array[local_id][p].to = -1;
				gather_in_use[local_id]++;
				total_runs[local_id][item.task_type]++;
				return -1;
			}
			else if (item.task_type == SEND_TO_STATION){
				station_index = cheapest_available_station();
				if (station_index == 9999){
					return 9999;
				}
				else{
					proc_in_use[local_id]++;
					sat_array[local_id][p].task_type = item.task_type;
					sat_array[local_id][p].execution_time = item.execution_time;
					sat_array[local_id][p].to = station_index;
					send_to_station[local_id][sat_array[local_id][p].to]++;
					total_runs[local_id][item.task_type]++;
					return -1;
				}
			}
			else if (item.task_type == SEND_TO_CONVOY){
				convoy_index = lowest_available_convoy();
				if (convoy_index == 9999){
					return 9999;
				}
				else{
					proc_in_use[local_id]++;
					sat_array[local_id][p].task_type = item.task_type;
					sat_array[local_id][p].execution_time = item.execution_time;
					sat_array[local_id][p].to = convoy_index;
					send_to_convoy[local_id][sat_array[local_id][p].to]++;
					total_runs[local_id][item.task_type]++;
					return convoy_index;
				}
			}
			else if (item.task_type == RECIEVE_FROM_CONVOY){
				proc_in_use[local_id]++;
				sat_array[local_id][p].task_type = item.task_type;
				sat_array[local_id][p].execution_time = item.execution_time;
				sat_array[local_id][p].to = id;
				recieve_from_convoys[local_id][sat_array[local_id][p].to]++;
				total_runs[local_id][item.task_type]++;
				return -1;
			}		
		}
	}
	return 1337;
}*/

int calc_storage(int storage, int max_storage){
	
	if (storage == 0){
		return 100;
	}
	else {
		return 100-storage*100/max_storage;
	}
	return -1;
}

int calc_send_to_station(int storage, int max_storage){
	int s, p_storage;
	int v = 0;
	if (storage == 0){
		return 0;
	}
	else{
		p_storage = storage*100/max_storage;
	}

	for (s = 0; s &lt; STATIONS ; s++){
		if (v &lt; ((p_storage-(stations[s].cost*stations[s].cost))+(stations[s].cost*stations[s].cost*p_storage)/100)){
			v = (p_storage-(stations[s].cost*stations[s].cost))+(stations[s].cost*stations[s].cost*p_storage)/100;
		}		
	}
	return v;
}

int calc_send_to_convoy(int storage, int max_storage){
	int c, p, p_storage, p_other_storage;
	int v = 0;
	if (storage == 0){
		return 0;
	}
	else{
		p_storage = storage*100/max_storage;
	}
	for (c = 0; c &lt; CONVOYS; c++){
		if (c != id){
			for (p = 0; p &lt; convoys[c].processors; p++){
				if (v &lt; p_storage-((sat_array[c][p].storage*100)/max_storage)){
					v = p_storage-((sat_array[c][p].storage*100)/max_storage);
				}
			}
		}
	}
	return v;
}
int check_window(int p, int t){
	int w;
	int best_window = -1; 
	int best_cost = MAX_VALUE;
	if (convoys[id].tasks_depending_on_window[t][0] == -1){
		return -1;
	}
	for (w = 0; w &lt; STATIONS; w++){
		if (OVER_STATION[sat_array[id][p].station_indexes[w]][w][2] == OPEN_WINDOW &amp;&amp; best_cost &gt; stations[w].cost &amp;&amp; convoys[id].tasks_depending_on_window[t][w]){
			best_window = w;
			best_cost = stations[w].cost;
		}
	}
	if (best_cost == MAX_VALUE){
		return MAX_VALUE;
	}
	else{
		return best_window;
	}
}

bool both_within_window(int c1, int c2, int p1, int p2){
	int w;
	int best = MAX_VALUE;
	for (w = 0; w &lt; STATIONS; w++){
		if (convoys[c1].tasks_depending_on_window[SEND_TO_CONVOY][w] &amp;&amp; convoys[c2].tasks_depending_on_window[SEND_TO_CONVOY][w]){
			if (OVER_STATION[sat_array[c1][p1].station_indexes[w]][w][2] &amp;&amp; OVER_STATION[sat_array[c2][p2].station_indexes[w]][w][2]){
				return true; 
			}
		} 
	}
	return false;
}

void assign_send_task(){
	int scores[PROCESSORS][3];
	int p,s,t,c, assign_task, assign_score, lowest_cost, lowest_convoy, lowest_processor;
	int assign_order[TASKS-1] = {SEND_TO_STATION,SEND_TO_CONVOY,GATHER_DATA};
	//Assign scores
	for (p = 0; p &lt; convoys[id].processors; p++){
		//Calculate cost for each satellites to determine the best task out of the available tasks that the convoy has decided between
		if (decisions[GATHER_DATA] &amp;&amp; check_window(p, GATHER_DATA) != MAX_VALUE){
			scores[p][0] = calc_storage(sat_array[id][p].storage,STORAGE);
		}
		if (decisions[SEND_TO_STATION] &amp;&amp; check_window(p, SEND_TO_STATION) != MAX_VALUE){
			scores[p][1] = calc_send_to_station(sat_array[id][p].storage,STORAGE);
		}
		if (decisions[SEND_TO_CONVOY] &amp;&amp; check_window(p, SEND_TO_CONVOY) != MAX_VALUE){
			scores[p][2] = calc_send_to_convoy(sat_array[id][p].storage,STORAGE);
		}
	}
	//Assign tasks based on scores
	for (p = 0; p &lt; convoys[id].processors; p++){
		if (sat_array[id][p].task_type == -1){
			assign_task = -1;
			assign_score = 0;
			for (t = 0; t &lt; TASKS-1; t++){
				if (sat_array[id][p].task_type == -1 &amp;&amp; assign_score &lt; scores[p][assign_order[t]]){
					assign_score = scores[p][assign_order[t]];
					assign_task = assign_order[t];
				}	
			}
			if (assign_task == SEND_TO_STATION){// Send_to_station
				sat_array[id][p].execution_time = tasks[assign_task].execution_time;
				sat_array[id][p].task_type = assign_task;
				sat_array[id][p].to = check_window(p, assign_task);
			}
			else if (assign_task == SEND_TO_CONVOY){//Send_to_convoy
				lowest_cost = MAX_VALUE;
				lowest_convoy = -1;
				lowest_processor = -1;
				for (c = 0; c &lt; CONVOYS; c++){
					if (id != c){
						for (p = 0; p &lt; convoys[c].processors; p++){
							if (both_within_window(id, c, p, p)){
								if (lowest_cost &gt; calc_storage(sat_array[c][p].storage,STORAGE)){
									lowest_cost = calc_storage(sat_array[c][p].storage,STORAGE);
									lowest_convoy = c;
									lowest_processor = p; 
								}
							}
						}
					}
				}
				if (lowest_cost != MAX_VALUE){
					sat_array[id][p].execution_time = tasks[assign_task].execution_time;
					sat_array[id][p].task_type = assign_task;
					sat_array[id][p].to = lowest_processor;
					sat_array[lowest_convoy][lowest_processor].execution_time = tasks[RECIEVE_FROM_CONVOY].execution_time;
					sat_array[lowest_convoy][lowest_processor].task_type = RECIEVE_FROM_CONVOY;
					sat_array[lowest_convoy][lowest_processor].to = p;
				}
			}
		}
	}
}

void assign_gather_task(){
	int scores[PROCESSORS][3];
	int p,s,t,c, assign_task, assign_score, lowest_cost, lowest_convoy, lowest_processor;
	int assign_order[TASKS-1] = {SEND_TO_STATION,SEND_TO_CONVOY,GATHER_DATA};
	//Assign scores
	for (p = 0; p &lt; convoys[id].processors; p++){
		//Calculate cost for each satellites to determine the best task out of the available tasks that the convoy has decided between
		if (decisions[GATHER_DATA] &amp;&amp; check_window(p, GATHER_DATA) != MAX_VALUE){
			scores[p][0] = calc_storage(sat_array[id][p].storage,STORAGE);
		}
		if (decisions[SEND_TO_STATION] &amp;&amp; check_window(p, SEND_TO_STATION) != MAX_VALUE){
			scores[p][1] = calc_send_to_station(sat_array[id][p].storage,STORAGE);
		}
		if (decisions[SEND_TO_CONVOY] &amp;&amp; check_window(p, SEND_TO_CONVOY) != MAX_VALUE){
			scores[p][2] = calc_send_to_convoy(sat_array[id][p].storage,STORAGE);
		}
	}
	//Assign tasks based on scores
	for (p = 0; p &lt; convoys[id].processors; p++){
		if (sat_array[id][p].task_type == -1){
			assign_task = -1;
			assign_score = 0;
			for (t = 0; t &lt; TASKS-1; t++){
				if (sat_array[id][p].task_type == -1 &amp;&amp; assign_score &lt; scores[p][assign_order[t]]){
					assign_score = scores[p][assign_order[t]];
					assign_task = assign_order[t];
				}	
			}
			if (assign_task == GATHER_DATA){
				sat_array[id][p].execution_time = tasks[assign_task].execution_time;
				sat_array[id][p].task_type = assign_task;
				proc_in_use[id]++;
				gather_in_use[id]++;
			}
		}
	}
}
//Called after cost has been calculated in the template, because insert_task uses the cost to determine the number of proccesers that needs to perform each task.
void add_tasks(){
	int p,s,t,c, assign_task, assign_score, assign_processor, lowest_cost, lowest_convoy, lowest_processor;
	int assign_order[TASKS-1] = {SEND_TO_STATION,SEND_TO_CONVOY,GATHER_DATA};
	int tries = proc_in_use[id];
	// Split function into two function, one that handle send to station and send to convoy and another function to assign gather data. Variable score may need to be kept outside of function to maintain the tables values.
	//Reset scores variable
	/*for (p = 0; p &lt; convoys[id].processors; p++){
		scores[p][0] = 0;
		scores[p][1] = 0;
		scores[p][2] = 0;
	}
	//Assign scores
	for (p = 0; p &lt; convoys[id].processors; p++){
		//Calculate cost for each satellites to determine the best task out of the available tasks that the convoy has decided between
		if (decisions[GATHER_DATA] &amp;&amp; check_window(p, GATHER_DATA) != MAX_VALUE){
			scores[p][0] = calc_storage(sat_array[id][p].storage,STORAGE);
		}
		if (decisions[SEND_TO_STATION] &amp;&amp; check_window(p, SEND_TO_STATION) != MAX_VALUE){
			scores[p][1] = calc_send_to_station(sat_array[id][p].storage,STORAGE);
		}
		if (decisions[SEND_TO_CONVOY] &amp;&amp; check_window(p, SEND_TO_CONVOY) != MAX_VALUE){
			scores[p][2] = calc_send_to_convoy(sat_array[id][p].storage,STORAGE);
		}
	}
	//Assign tasks based on scores
	while(convoys[id].processors != tries){
		assign_task = -1;
		assign_score = 0;
		assign_processor = -1;
		for (t = 0; t &lt; TASKS-1; t++){
			for (p = 0; p &lt; convoys[id].processors; p++){
				if (sat_array[id][p].task_type == -1 &amp;&amp; assign_score &lt; scores[p][assign_order[t]]){
					assign_score = scores[p][assign_order[t]];
					assign_task = assign_order[t];
					assign_processor = p;
				}	
			}
		}
		if (assign_task == 0){
			sat_array[id][assign_processor].execution_time = tasks[assign_task].execution_time;
			sat_array[id][assign_processor].task_type = assign_task;
			proc_in_use[id]++;
		}
		if (assign_task == 1){// Send_to_station
			sat_array[id][assign_processor].execution_time = tasks[assign_task].execution_time;
			sat_array[id][assign_processor].task_type = assign_task;
			sat_array[id][assign_processor].to = check_window(assign_processor, assign_task);
			proc_in_use[id]++;
		}
		else{//Send_to_convoy
			lowest_cost = MAX_VALUE;
			lowest_convoy = -1;
			lowest_processor = -1;
			for (c = 0; c &lt; CONVOYS; c++){
				if (id != c){
					for (p = 0; p &lt; convoys[c].processors; p++){
						if (both_within_window(id, c, assign_processor, p)){
							if (lowest_cost &gt; calc_storage(sat_array[c][p].storage,STORAGE)){
								lowest_cost = calc_storage(sat_array[c][p].storage,STORAGE);
								lowest_convoy = c;
								lowest_processor = p; 
							}
						}
					}
				}
			}
			if (lowest_cost != MAX_VALUE){
				sat_array[id][assign_processor].execution_time = tasks[assign_task].execution_time;
				sat_array[id][assign_processor].task_type = assign_task;
				sat_array[id][assign_processor].to = check_window(assign_processor, assign_task);
				proc_in_use[id]++;
				proc_in_use[lowest_convoy]++;
			}
		}	
		tries++;
	}*/
}

//Template guard - forces gather data to be taken if storage is below 50%
bool allow_gather_data(){
	if (current_task == GATHER_DATA){
		if (THRESHOLD_GATHER_DATA &lt; storages[id]*100/convoys[id].storage){
			return true;
		}
		else{
			return false;
		}
	}
	else{
		return true;
	}
}

//Template guard - forces send data to Earth to be taken if storage is above 50%
bool allow_send_data_to_station(){
	if (current_task == SEND_TO_STATION){
		if (THRESHOLD_SEND_TO_STATION_UPPER &gt; storages[id]*100/convoys[id].storage &amp;&amp;
		    THRESHOLD_SEND_TO_STATION_LOWER &lt; storages[id]*100/convoys[id].storage){
			//if (FORCE_SEND_TO_STATION){
			//	return true;
			//}
			//else{
				return false;
			//}
		}
		else{
			return true;
		}
	}
	else{
		return true;	
	}
}

//Template guard - check if storage is above 75%
bool allow_sending_to_convoy(){
	int c;
	int total_storage_procentage = 0;
	if (current_task == SEND_TO_CONVOY){
		if (THRESHOLD_SEND_TO_CONVOY &lt; storages[id]*100/convoys[id].storage){
			for (c = 0; c &lt; CONVOYS; c++){
				total_storage_procentage = storages[id]*100/convoys[id].storage;
			}
			if ((total_storage_procentage/CONVOYS)-CONVOYS_EQUALITY &lt; (storages[id]*100/convoys[id].storage) &amp;&amp;
			    (total_storage_procentage/CONVOYS)+CONVOYS_EQUALITY &gt; (storages[id]*100/convoys[id].storage)){
				return false;
			}
			else{
				return true;
			}
		}
		else{
			return false;
		}
	}
	else{
		return true;	
	}
	
}

//return the highest cost out of all the available stations for the individual convoy. Used in calc_cost method.
int find_highest_cost(int c){
	int s;
	int highest = 0;
	/*for (s = 0; s &lt; STATIONS; s++){
		if(convoys[c].send_to_station[s] != 0 &amp;&amp; stations[s].cost &gt; highest){
			highest = stations[s].cost;
		}
	}*/
	return highest;
}



//Calculate the cost based on storage, processors in use, and task distribution amount processors.
void calc_cost(){
	/*int i, c, s, p;
	int sender_cost[CONVOYS][STATIONS] = {STATION_ZEROS, STATION_ZEROS, STATION_ZEROS};
	int total_cost = 0;
	int internal_cost = 0;
	calculated_cost = 0;	
	total_cost = 0;
	obs_sender_station_cost[id] = 0;
	//Cost goes up if we have low storage and no processes gathering data.
	if ((100-storages[id]*100/convoys[id].storage)*(100-gather_in_use[id]*100/convoys[id].processors)/1000 &gt;=
	    (storages[id]*100/convoys[id].storage)*(gather_in_use[id]*100/convoys[id].processors)/1000){
		calculated_cost += (100-storages[id]*100/convoys[id].storage)*(100-gather_in_use[id]*100/convoys[id].processors)/1000;
		obs_gather_cost[id] = (100-storages[id]*100/convoys[id].storage)*(100-gather_in_use[id]*100/convoys[id].processors)/1000;
	}
	else {
		calculated_cost += (storages[id]*100/convoys[id].storage)*(gather_in_use[id]*100/convoys[id].processors)/1000;
		obs_gather_cost[id] = (storages[id]*100/convoys[id].storage)*(gather_in_use[id]*100/convoys[id].processors)/1000;
	}
	//Cost goes up if we have high storage and no procceses sending to other convoys or stations on Earth
	internal_cost = find_highest_cost(id);
	for (s = 0; s &lt; STATIONS ; s++){
		sender_cost[id][s] = 0;
		if (convoys[id].send_to_station[s] != 0){
			if (((100-storages[id]*100/convoys[id].storage) * ((internal_cost*10)/stations[s].cost)) + (((internal_cost*10)/stations[s].cost) * (100-send_to_station[id][s]*100/convoys[id].send_to_station[s])) &lt;
			    ((storages[id]*100/convoys[id].storage) * ((internal_cost*10)/stations[s].cost)) + (((internal_cost*10)/stations[s].cost) * (send_to_station[id][s]*100/convoys[id].send_to_station[s]))){
				sender_cost[id][s] = ((100-storages[id]*100/convoys[id].storage) * ((internal_cost*10)/stations[s].cost)) + (((internal_cost*10)/stations[s].cost) * (100-send_to_station[id][s]*100/convoys[id].send_to_station[s]));
			}
			else{
				sender_cost[id][s] = ((storages[id]*100/convoys[id].storage) * ((internal_cost*10)/stations[s].cost)) + (((internal_cost*10)/stations[s].cost) * (send_to_station[id][s]*100/convoys[id].send_to_station[s]));
			}
		}
		total_cost += (internal_cost*10)/stations[s].cost;
		obs_sender_station_cost[id] += sender_cost[id][s]/100;
	}
	obs_sender_station_cost[id] /= total_cost/10;
	calculated_cost += obs_sender_station_cost[id];

	obs_sender_convoy_cost[id] = 0;
	for (c = 0; c &lt; CONVOYS; c++){
		//Cost goes up if we have high storage and one convoys have low storage.
		if (obs_sender_convoy_cost[id] &lt; ((storages[id]*100/convoys[id].storage) - (storages[c]*100/convoys[c].storage))/10 &amp;&amp; id != c){
			obs_sender_convoy_cost[id] = ((storages[id]*100/convoys[id].storage) - (storages[c]*100/convoys[c].storage))/10;
		}
	}
	calculated_cost += obs_sender_convoy_cost[id];*/
}











</declaration><location id="id7" x="-160" y="64"><committed/></location><location id="id8" x="-160" y="-96"><committed/></location><location id="id9" x="-392" y="-40"></location><init ref="id9"/><transition><source ref="id9"/><target ref="id9"/><label kind="synchronisation" x="-536" y="-72">assign_rest?</label><label kind="assignment" x="-536" y="-32">assign_gather_task()</label><nail x="-536" y="-48"/><nail x="-536" y="-32"/></transition><transition><source ref="id9"/><target ref="id9"/><label kind="synchronisation" x="-368" y="-72">assign_send_tasks?</label><label kind="assignment" x="-368" y="-32">assign_send_task()</label><nail x="-288" y="-48"/><nail x="-288" y="-32"/></transition><transition><source ref="id8"/><target ref="id9"/><label kind="synchronisation" x="-360" y="-184">move?</label><nail x="-160" y="-160"/><nail x="-392" y="-160"/></transition><transition><source ref="id7"/><target ref="id9"/><label kind="synchronisation" x="-360" y="88">move?</label><nail x="-160" y="112"/><nail x="-392" y="112"/></transition><transition><source ref="id9"/><target ref="id7"/><label kind="guard" x="-360" y="24">allow_sending_to_convoy()</label><label kind="synchronisation" x="-360" y="8">suggest_task?</label><label kind="assignment" x="-360" y="64">accept_suggestion()</label><nail x="-368" y="64"/></transition><transition><source ref="id9"/><target ref="id8"/><label kind="guard" x="-360" y="-136">allow_gather_data() &amp;&amp;
allow_send_data_to_station()</label><label kind="synchronisation" x="-360" y="-152">suggest_task?</label><label kind="assignment" x="-360" y="-96">reject_suggestion()</label><nail x="-376" y="-96"/></transition></template><system>system Convoy, Scheduler;</system></nta>