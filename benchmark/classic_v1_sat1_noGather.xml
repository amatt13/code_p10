<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int N = 4; // Amount of tasks
const int S = 3; // Amount of satellites
const int SCHEDULE_LENGHT = 360; // Length of schedule
const int ORBIT_TIME = 60; // duration of one orbit
const int MAX_MEMORY = 100; // satellites maximum storage capacity
const int LOW_MEMORY = MAX_MEMORY * 30/100; // threshold for when  little memory is used
const int HIGH_MEMORY = MAX_MEMORY * 75/100; // threshold for when a lot memory is used
const int RECEIVE_INDEX = 3; // the index for the receive task
const int TRANSMIT_INDEX = 2; // the index for the internal send task
const int TASK_SUGGEST_INTERVAL = 3; // how often should a task be suggested


// used for common instansiations of arrays
const int ZEROES[N] = {0,0,0,0};
const int S_ZEROES[S][N] = {ZEROES, ZEROES, ZEROES};
const int MINUSSES[N] = {-1,-1,-1,-1};
const int S_MINUSSES[S][N] = {MINUSSES, MINUSSES, MINUSSES};
const int ACTIVE_INIT[S] = {-1,-1,-1};

typedef int[0, N-1] id_t;
typedef int[0, S-1] id_s;

// Describes time intervals where windows are open i.e. comunnication with Earth is possible
const int STATION_INDEX = 35; // changes for; when station are in range
const int STATIONS = 2; // amount of windows i.e. stations to which can be communicated
const int STATION_ATTRI = 3; // elements discribing window
// Start_time, End_time, active or not
const int OVER_STATION[STATION_INDEX][STATIONS][STATION_ATTRI] = {
{{0, 42, 1}, {0, 4, 0}},
{{43, 77, 0}, {5, 26, 1}},
{{78, 130, 1}, {27, 92, 0}},
{{131, 165, 0}, {93, 115, 1}},
{{166, 218, 1}, {116, 180, 0}},
{{219, 253, 0}, {181, 203, 1}},
{{254, 307, 1}, {204, 269, 0}},
{{308, 342, 0}, {270, 291, 1}},
{{343, 395, 1}, {292, 357, 0}},
{{396, 430, 0}, {358, 380, 1}},
{{431, 484, 1}, {381, 445, 0}},
{{485, 519, 0}, {446, 468, 1}},
{{520, 572, 1}, {469, 533, 0}},
{{573, 607, 0}, {534, 556, 1}},
{{608, 660, 1}, {557, 622, 0}},
{{661, 695, 0}, {623, 644, 1}},
{{696, 748, 1}, {645, 710, 0}},
{{749, 783, 0}, {711, 733, 1}},
{{784, 837, 1}, {734, 798, 0}},
{{838, 872, 0}, {799, 821, 1}},
{{873, 925, 1}, {822, 887, 0}},
{{926, 960, 0}, {888, 909, 1}},
{{961, 1014, 1}, {910, 975, 0}},
{{1015, 1048, 0}, {976, 998, 1}},
{{1049, 1102, 1}, {999, 1063, 0}},
{{1103, 1137, 0}, {1064, 1086, 1}},
{{1138, 1190, 1}, {1087, 1151, 0}},
{{1191, 1225, 0}, {1152, 1174, 1}},
{{1226, 1279, 1}, {1175, 1240, 0}},
{{1280, 1314, 0}, {1241, 1263, 1}},
{{1315, 1367, 1}, {1264, 1328, 0}},
{{1368, 1402, 0}, {1329, 1351, 1}},
{{1403, 1440, 1}, {1352, 1416, 0}},
{{0, 9999, 0}, {1417, 1439, 1}},
{{0, 9999, 0}, {1440, 1440, 0}}};

clock t_time; // total amount of time passed
urgent broadcast chan release[S], request[S], preemt[S], add_task[S], check, not_rdy_to_rec[S], go , slew_sat[S], transmit_data[S];
broadcast chan next[S], find_new;
chan priority find_new, slew_sat &lt; go;

/** Task Description */
typedef struct {
	bool depend_station[STATIONS];  // what stations must the satellite be in range of to perform the task
	int execution_time;  // how long does task take to execute
	int deadline;        // task deadline
	int prio;            // tasks priority
	int data_rate;       // how fast the task increase or decrease storage
	int orientation;     // what orientation must the satellite have to perform task
} TaskDescription;

/** Satellite Description */
typedef struct {
	int offset;                // when does the satellite "start"
	int rotation;              // what is the current orientation of the satellite
	int memory;                // current amount stored
	bool available_tasks[N];   // what tasks can the satellite perform
	int suggested_task;        // what task should be performed next
} SatDescription;

// Some tasks, with different propperties
				      /* 0 = forward, 1 = earth, 2 = backwards*/
                                      /*  w     E  D   P  rate Co   Orien*/
const TaskDescription send_data       = {{1,0}, 20,26, 9, -2, 1};
const TaskDescription gather_new_data = {{1,1}, 15,21,  6,  5, 0};
const TaskDescription transfer        = {{0,0}, 5,17,  5, -3, 2};
const TaskDescription receive         = {{0,0}, 5,11,  4,  3, 0};
const TaskDescription jobs[N]         = {send_data, gather_new_data, transfer, receive}; //update RECEIVE_INDEX if receive moves
const int PRIOS[N] = {jobs[0].prio, jobs[1].prio, jobs[2].prio, jobs[3].prio};

// some satellites performing different tasks and with different offset
const SatDescription sat_gat = {3, 0, 80, {0,1,1,0}, -1};
const SatDescription sat_trans = {3, 0, 20, {0,0,1,1}, -1};
const SatDescription sat_sen = {9, 2, 0, {1,0,0,1}, -1};
SatDescription sats[S] = {sat_gat, sat_trans, sat_sen};

/** Remove StationDescription and replace with array over costrate */
const int station_price_rate[STATIONS] = {13, 8};


/** Variables */
id_s RQ;
bool runnable[N] = {0,0,0,0};    // can this task be performed
bool win_active[STATIONS] = {0,0};      // it the satellite currently over a station
int runs[S][N] = S_ZEROES;       // how many times have each task been run on each satellite (for benchmarking)
int priorities[S][N] = {PRIOS, PRIOS, PRIOS};
int active[S] = ACTIVE_INIT;
int queue[S][N] = S_MINUSSES;
int sender = -1;
int delays[S][N] = S_ZEROES; //(for benchmarking)
int data_earth = 0; // Amount of data units sent to Earth (for benchmarking)
int data_internal = 0; // Amount of data sent internaly between satellites (for benchmarking)
int data_gathered = 0; // Amount of data currently stored in the system (for benchmarking)



bool empty(int q[N]){
	int i = 0;
	for (i = 0; i &lt; N; i++){
		if(q[i] != -1){
			return false;
		}
	}
	return true;
}

bool orientation(int sat_id){
    if (jobs[active[sat_id]].orientation == -1) return true;
	else if (sats[sat_id].rotation != jobs[active[sat_id]].orientation) return false;
	else return true;
}

bool validSuggestion(int id) {
	return sats[id].suggested_task != -1;
}



</declaration>
	<template>
		<name>Scheduler</name>
		<parameter>const id_s sat_id</parameter>
		<declaration>int task = 0;
int com = 0;
int is_synced = false;
const int TI = TRANSMIT_INDEX;
const int RI = RECEIVE_INDEX;
int current;
/** order the queue to highest priority in front */
void orderQueue(){ //OI! Look here
	int i, temp = -1, selected = -1, high = -1, to_check = -1;
	 
	if(queue[sat_id][0] == -1){ return; }
	for (i = 0; i &lt; N; i++){
		if (queue[sat_id][i] != -1) {
			to_check = queue[sat_id][i];
			if (runnable[to_check] == 1) {
				if(priorities[sat_id][to_check] &gt; high){
					selected = i;
					high = priorities[sat_id][to_check];
	}}}}
	if (selected != -1) {
		temp = queue[sat_id][selected];
		queue[sat_id][selected] = queue[sat_id][0];
		queue[sat_id][0] = temp;
	}

}
/** Add task to back of queue */
void enqueue(int _task){
	int i = 0;
	if (queue[sat_id][N-1] == -1){
	for (i = 0; i &lt; N; i++){
		if (queue[sat_id][i] == -1){
			queue[sat_id][i] = _task; 
			i = N;
		} else if (queue[sat_id][i] == _task) {
			return;
		}}
	}
	orderQueue();
	
}
/** Amount of queued tasks */
int len(){ 
	int i;
	for (i = 0; i &lt; N; i++){
		if(queue[sat_id][i] == -1) {
			return i; 
		}
	}
	return N;
}
/** Update the queue after running the first one */
void dequeue(){
	int i = 0, k = len();
        while (i &lt; k) {
        	queue[sat_id][i] = queue[sat_id][i + 1];
                i++;
        }
        queue[sat_id][i] = -1;
	orderQueue();
}

void set_com(){
    if (sat_id == S-1) com = sat_id;
    else com = sat_id + 1;
}

bool hasSpace(){
	return sats[sat_id].memory + transfer.data_rate * transfer.execution_time &lt;= MAX_MEMORY;
}

int orientationProgress(){
	if (sats[sat_id].rotation == transfer.orientation &amp;&amp; sats[com].rotation == receive.orientation){
		return 0;
	}
	else if (sats[sat_id].rotation == transfer.orientation &amp;&amp; sats[com].rotation != receive.orientation){
		return 1;
	}
	else if (sats[sat_id].rotation != transfer.orientation &amp;&amp; sats[com].rotation == receive.orientation){
		return 2;
	}
	else{   
		return 3;
	}
}
bool rdyToTrans(){
	if (sats[com].rotation == receive.orientation &amp;&amp; sats[sat_id].rotation == transfer.orientation) return true;
	else return false;
}


bool lowerPriority() {
	return priorities[sat_id][task] &lt;= priorities[sat_id][active[sat_id]];
}


int front() {
	return queue[sat_id][0];
}

bool internalCom() {
	return (current == RECEIVE_INDEX || current == TRANSMIT_INDEX);
}






















</declaration>
		<location id="id0" x="433" y="459">
			<committed/>
		</location>
		<location id="id1" x="-212" y="374">
			<name x="-222" y="340">pre_in</name>
			<committed/>
		</location>
		<location id="id2" x="765" y="127">
			<committed/>
		</location>
		<location id="id3" x="8" y="408">
			<committed/>
		</location>
		<location id="id4" x="110" y="-136">
			<committed/>
		</location>
		<location id="id5" x="376" y="-264">
			<committed/>
		</location>
		<location id="id6" x="432" y="48">
			<committed/>
		</location>
		<location id="id7" x="432" y="-40">
			<committed/>
		</location>
		<location id="id8" x="576" y="-40">
			<name x="566" y="-74">Waiting</name>
		</location>
		<location id="id9" x="576" y="128">
			<name x="566" y="94">Slewing</name>
		</location>
		<location id="id10" x="336" y="-208">
			<committed/>
		</location>
		<location id="id11" x="-76" y="-221">
			<committed/>
		</location>
		<location id="id12" x="-34" y="374">
			<committed/>
		</location>
		<location id="id13" x="-34" y="459">
			<committed/>
		</location>
		<location id="id14" x="-229" y="127">
			<committed/>
		</location>
		<location id="id15" x="-229" y="59">
			<committed/>
		</location>
		<location id="id16" x="110" y="0">
			<committed/>
		</location>
		<location id="id17" x="229" y="459">
			<name x="205" y="475">Preempt</name>
			<committed/>
		</location>
		<location id="id18" x="229" y="-136">
			<name x="253" y="-152">Release</name>
			<committed/>
		</location>
		<location id="id19" x="229" y="127">
			<name x="247" y="104">Occupied</name>
		</location>
		<location id="id20" x="-76" y="127">
			<committed/>
		</location>
		<location id="id21" x="-76" y="-136">
			<name x="-65" y="-130">Start</name>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id21"/>
			<target ref="id5"/>
			<label kind="guard" x="-42" y="-246">!hasSpace()</label>
			<label kind="synchronisation" x="-42" y="-229">transmit_data[sat_id]?</label>
			<nail x="-8" y="-229"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id20"/>
			<label kind="guard" x="-280" y="238">current == RI</label>
			<label kind="synchronisation" x="-280" y="255">release[sat_id-1]!</label>
			<label kind="assignment" x="-280" y="272">active[sat_id] = front()</label>
			<nail x="-263" y="374"/>
			<nail x="-263" y="204"/>
			<nail x="-93" y="204"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id13"/>
			<label kind="guard" x="-8" y="493">!lowerPriority()</label>
			<label kind="synchronisation" x="0" y="518">check!</label>
			<nail x="433" y="518"/>
			<nail x="-34" y="518"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id19"/>
			<label kind="guard" x="518" y="229">lowerPriority() &amp;&amp;
active[sat_id] != RECEIVE_INDEX</label>
			<label kind="synchronisation" x="518" y="272">not_rdy_to_rec[sat_id]!</label>
			<nail x="510" y="459"/>
			<nail x="510" y="221"/>
			<nail x="306" y="221"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id19"/>
			<label kind="guard" x="391" y="289">lowerPriority() &amp;&amp;
active[sat_id] ==
RECEIVE_INDEX</label>
			<nail x="433" y="238"/>
			<nail x="280" y="238"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id20"/>
			<label kind="guard" x="-229" y="187">current == TI</label>
			<label kind="synchronisation" x="-229" y="204">release[com]!</label>
			<label kind="assignment" x="-229" y="221">active[sat_id] = front()</label>
			<nail x="-212" y="204"/>
			<nail x="-93" y="204"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id1"/>
			<label kind="guard" x="-195" y="323">runnable[task] &amp;&amp;
internalCom()</label>
			<label kind="synchronisation" x="-194" y="357">release[sat_id]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id9"/>
			<label kind="guard" x="578" y="161">active[com] != TRANSMIT_INDEX</label>
			<nail x="663" y="161"/>
			<nail x="578" y="161"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="637" y="127">check?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="578" y="76">active[com] == TRANSMIT_INDEX</label>
			<nail x="671" y="110"/>
			<nail x="671" y="-263"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id5"/>
			<label kind="guard" x="323" y="170">active[sat_id] == TRANSMIT_INDEX</label>
			<label kind="synchronisation" x="399" y="187">not_rdy_to_rec[com]?</label>
			<nail x="314" y="144"/>
			<nail x="314" y="187"/>
			<nail x="697" y="187"/>
			<nail x="697" y="-263"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id15"/>
			<label kind="assignment" x="-289" y="382">task = active[sat_id]</label>
			<nail x="-297" y="408"/>
			<nail x="-297" y="59"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="314" y="374">transmit_data[sat_id]?</label>
			<label kind="assignment" x="314" y="391">task = RECEIVE_INDEX,
RQ = sat_id</label>
			<nail x="246" y="280"/>
			<nail x="331" y="280"/>
			<nail x="331" y="459"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="25" y="246">next[sat_id]?</label>
			<nail x="153" y="238"/>
			<nail x="8" y="238"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id4"/>
			<label kind="guard" x="80" y="-176">active[com] != RECEIVE_INDEX</label>
			<nail x="224" y="-160"/>
			<nail x="144" y="-160"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id4"/>
			<label kind="guard" x="110" y="-136">active[com] == 
RECEIVE_INDEX</label>
			<label kind="synchronisation" x="144" y="-102">release[com]!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-40" y="-280">release[sat_id]!</label>
			<label kind="assignment" x="-40" y="-264">active[sat_id] = -1</label>
			<nail x="-48" y="-264"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="416" y="-128">release[sat_id]?</label>
			<nail x="569" y="-127"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="416" y="-152">release[sat_id]?</label>
			<nail x="584" y="120"/>
			<nail x="680" y="120"/>
			<nail x="680" y="-136"/>
			<nail x="584" y="-136"/>
			<nail x="584" y="-144"/>
			<nail x="568" y="-144"/>
			<nail x="568" y="-136"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id5"/>
			<label kind="guard" x="408" y="-288">task == TRANSMIT_INDEX</label>
			<label kind="synchronisation" x="416" y="-264">not_rdy_to_rec[com]?</label>
			<nail x="688" y="128"/>
			<nail x="688" y="96"/>
			<nail x="688" y="-264"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="289" y="25">transmit_data[com]!</label>
			<nail x="272" y="48"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="289" y="-8">request[com]!</label>
			<nail x="272" y="8"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="464" y="32">rdyToTrans()</label>
			<label kind="synchronisation" x="448" y="48">request[sat_id]!</label>
			<nail x="560" y="48"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="456" y="-56">rdyToTrans()</label>
			<label kind="synchronisation" x="448" y="-40">request[sat_id]!</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="528" y="-16">orientation(sat_id) &amp;&amp; 
!rdyToTrans()</label>
			<label kind="synchronisation" x="527" y="17">transmit_data[com]!</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id9"/>
			<label kind="guard" x="331" y="68">task == TRANSMIT_INDEX
&amp;&amp; !is_synced &amp;&amp;
active[com] != TRANSMIT_INDEX</label>
			<label kind="synchronisation" x="476" y="127">go!</label>
			<label kind="assignment" x="344" y="128">is_synced = true</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="416" y="-232">not_rdy_to_rec[com]?</label>
			<nail x="576" y="-232"/>
			<nail x="376" y="-232"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="288" y="-80">request[sat_id]!</label>
			<nail x="336" y="-32"/>
			<nail x="248" y="0"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id10"/>
			<label kind="guard" x="144" y="-240">hasSpace()</label>
			<label kind="synchronisation" x="112" y="-224">transmit_data[sat_id]?</label>
			<label kind="assignment" x="88" y="-208">task = RECEIVE_INDEX,
active[sat_id] = RECEIVE_INDEX</label>
			<nail x="0" y="-208"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id21"/>
			<label kind="assignment" x="-152" y="-192">set_com()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id19"/>
			<label kind="guard" x="-8" y="176">!runnable[task]</label>
			<label kind="assignment" x="-8" y="195">task = active[sat_id]</label>
			<nail x="-32" y="192"/>
			<nail x="112" y="192"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id20"/>
			<label kind="guard" x="-136" y="238">runnable[task] &amp;&amp;
!internalCom()</label>
			<label kind="synchronisation" x="-144" y="272">preemt[sat_id]!</label>
			<label kind="assignment" x="-144" y="289">active[sat_id] = front()</label>
			<nail x="-76" y="374"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-85" y="416">check?</label>
			<label kind="assignment" x="-187" y="416">enqueue(task),
current = active[sat_id]</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-184" y="128">check?</label>
			<label kind="assignment" x="-248" y="144">enqueue(task),
active[sat_id] = front()</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-224" y="80">check!</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-176" y="-48">queue[sat_id][0] == -1 ||
!runnable[queue[sat_id][0]]</label>
			<label kind="assignment" x="-176" y="-16">active[sat_id] = -1</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-17" y="34">check?</label>
			<label kind="assignment" x="-17" y="0">orderQueue(),
active[sat_id] = front()</label>
			<nail x="-25" y="0"/>
			<nail x="-25" y="85"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id13"/>
			<label kind="guard" x="42" y="433">!lowerPriority()</label>
			<label kind="synchronisation" x="51" y="459">check!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id21"/>
			<label kind="guard" x="-48" y="-152">empty(queue[sat_id])</label>
			<label kind="assignment" x="-32" y="-136">active[sat_id] = -1</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="guard" x="51" y="289">lowerPriority()</label>
			<label kind="assignment" x="51" y="306">enqueue(task),
task = active[sat_id]</label>
			<nail x="144" y="306"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id16"/>
			<label kind="guard" x="8" y="-85">!empty(queue[sat_id])</label>
			<label kind="synchronisation" x="59" y="-68">check!</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="170" y="289">validSuggestion(sat_id)</label>
			<label kind="synchronisation" x="195" y="306">add_task[sat_id]?</label>
			<label kind="assignment" x="195" y="331">task = sats[sat_id].
suggested_task,
RQ = sat_id</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="184" y="-32">release[sat_id]?</label>
			<label kind="assignment" x="176" y="-64">orderQueue(),
RQ = sat_id</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-8" y="68">queue[sat_id][0] != -1 &amp;&amp; 
runnable[queue[sat_id][0]] &amp;&amp;
active[sat_id] != -1</label>
			<label kind="synchronisation" x="-8" y="127">request[sat_id]!</label>
			<label kind="assignment" x="-8" y="144">dequeue(), is_synced = false,
task = active[sat_id]</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-340" y="-102">add_task[sat_id]?</label>
			<label kind="assignment" x="-340" y="-85">task = sats[sat_id].suggested_task</label>
			<nail x="-229" y="-136"/>
		</transition>
	</template>
	<template>
		<name>Processor</name>
		<parameter>const id_s sat_id</parameter>
		<declaration>clock run_time[N], exe_time;
int time_used[N] = ZEROES;
int task = 0;
int price;
int expenses;
int rec = 0;
clock idle, wait, work, slew; // (for benchmarking)
int w_queue[N] = MINUSSES;
int pre = 0;
int VAR = -1;

void resetPriority() {
    int i;
    priorities[sat_id][task] = jobs[task].prio;
    for(i = 0; i &lt; N; i++){
        if (priorities[sat_id][i] == 0){
            priorities[sat_id][i] = jobs[i].prio;
        }
    }
}


void boostPriority(){
    priorities[sat_id][task] = priorities[sat_id][active[sat_id]];
}

void calc_cost(){
// TODO: Håndter overlappende vinduer
    int i = 0;
    price = 9999;
    for (i = 0; i &lt; STATIONS; i++){
        if(jobs[task].depend_station[i] == 1 &amp;&amp; win_active[i]){
            if (price &gt;= station_price_rate[i] * jobs[task].execution_time){
                price = station_price_rate[i] * jobs[task].execution_time; //choose cheapest
            }
        }
    }
    if (price == 9999){
        price = 0;
    }
}

void statistics(int value){
    VAR = task;
    if (task == 0){
        data_earth += value*-1;
    }
    else if (task == 1){
        data_gathered += value;
    }
    else if (task == 2) {
        data_internal += value*-1;
    }
}

void update_storage(int t) {
   int memory = (jobs[t].execution_time * jobs[t].data_rate);
   if (sats[sat_id].memory + memory &gt; MAX_MEMORY) { // add above
           memory = MAX_MEMORY - sats[sat_id].memory;
           sats[sat_id].memory = MAX_MEMORY;
   }
   else if (sats[sat_id].memory + memory &lt; 0) { // remove below
           memory = sats[sat_id].memory*-1;
           sats[sat_id].memory = 0;
   }
   else {
       sats[sat_id].memory += memory;
   }
   statistics(memory); // adds nothing if 0
}

void reportDone() {
    runs[sat_id][task] ++;
    
    expenses = expenses + price;
    time_used[task] = 0;
}

void updateProgress(int time) {
    time_used[task] += time;
}

void resetProgress() {
    time_used[task] = 0;
}

void startNew(){
    task = active[sat_id];
    exe_time = 0;
    if (time_used[task] == 0) 
        run_time[task] = 0;
    calc_cost();
}

bool isInternalCom(){
    if (task == RECEIVE_INDEX|| task == TRANSMIT_INDEX) return true;
    else return false;
}


bool activeTrans() {
    return active[sat_id] == TRANSMIT_INDEX;
}

int getDeadline() {
    return jobs[task].deadline;
}

int getExeTime() {
    return jobs[task].execution_time;
}

bool activeIsTrans() {
    return active[sat_id] == TRANSMIT_INDEX;
}

int getWaitingD(){    
    return jobs[w_queue[0]].deadline;
}
int getRemaining(){
    return getExeTime() - time_used[w_queue[0]];
}


void insert_task(){
    int i;
    for (i = 0; i &lt; N; i++){
        if(w_queue[i] == -1){
            w_queue[i] = task;
            return; 
        }
    }
}

void dequeue(){
    int i;
    for (i = 0; i &lt; N; i++){
        if (i+1 &lt; N){
            w_queue[i] = w_queue[i+1];
        }
        if (w_queue[i] == -1){
            return;
        }
    }
}

void preemt_task() {
    boostPriority();
    updateProgress(jobs[task].execution_time/2);
    insert_task();
    task = active[sat_id];
    if (time_used[task] == 0) 
        run_time[task] = 0;
}

void resume_task(){
    task = w_queue[0];
    dequeue();
}

bool rdyToRun() {
    return (!activeTrans() || (activeTrans() &amp;&amp; !orientation(sat_id)));
}

void delayed(int t) {
    delays[sat_id][t] ++;
}











</declaration>
		<location id="id22" x="-2856" y="-2397">
			<committed/>
		</location>
		<location id="id23" x="-2643" y="-2397">
			<committed/>
		</location>
		<location id="id24" x="-2974" y="-2524">
			<committed/>
		</location>
		<location id="id25" x="-2855" y="-2796">
			<committed/>
		</location>
		<location id="id26" x="-2218" y="-2473">
			<committed/>
		</location>
		<location id="id27" x="-2218" y="-2864">
			<committed/>
		</location>
		<location id="id28" x="-2473" y="-2796">
			<name x="-2497" y="-2828">Aborted</name>
			<committed/>
		</location>
		<location id="id29" x="-2218" y="-2796">
			<name x="-2210" y="-2820">Waiting</name>
			<label kind="invariant" x="-1980" y="-2805">wait' == 1  &amp;&amp;
work' == 0 &amp;&amp; 
idle' == 0 &amp;&amp;
slew' == 0</label>
		</location>
		<location id="id30" x="-2660" y="-2796">
			<name x="-2700" y="-2820">End</name>
			<committed/>
		</location>
		<location id="id31" x="-2218" y="-2617">
			<name x="-2202" y="-2625">Slewing</name>
			<label kind="invariant" x="-2099" y="-2626">run_time[task]  &lt;= 
getDeadline() &amp;&amp;
wait' == 0  &amp;&amp;
work' == 0 &amp;&amp; 
idle' == 0 &amp;&amp;
slew' == 1</label>
		</location>
		<location id="id32" x="-2473" y="-2617">
			<name x="-2549" y="-2643">Occupied</name>
			<label kind="invariant" x="-2524" y="-2371">run_time[task]  &lt;= 
getDeadline() &amp;&amp;
exe_time + time_used[task]  &lt;= 
getExeTime() &amp;&amp; 
wait' == 0  &amp;&amp;
work' == 1 &amp;&amp; 
idle' == 0 &amp;&amp;
slew' == 0</label>
		</location>
		<location id="id33" x="-2473" y="-2473">
			<name x="-2524" y="-2490">Block</name>
			<committed/>
		</location>
		<location id="id34" x="-2855" y="-2473">
			<name x="-2898" y="-2498">Free</name>
			<label kind="invariant" x="-3281" y="-2465">wait' == 0  &amp;&amp;
work' == 0 &amp;&amp; 
idle' == 1 &amp;&amp;
slew' == 0</label>
		</location>
		<init ref="id34"/>
		<transition>
			<source ref="id34"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-2983" y="-2431">request[sat_id]?</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-2847" y="-2346">time_used[active[sat_id]]</label>
			<label kind="assignment" x="-2839" y="-2329">task = active[sat_id]</label>
			<nail x="-2856" y="-2329"/>
			<nail x="-2643" y="-2329"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id27"/>
			<label kind="guard" x="-2116" y="-2779">run_time[task] &gt;=
getDeadline()</label>
			<nail x="-2184" y="-2652"/>
			<nail x="-2040" y="-2652"/>
			<nail x="-2040" y="-2864"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-2847" y="-2422">!time_used[active[sat_id]]</label>
			<label kind="assignment" x="-2830" y="-2397">task = active[sat_id],
run_time[task] = 0</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id32"/>
			<label kind="guard" x="-2779" y="-2592">run_time[task] &gt; 
getDeadline() &amp;&amp;
time_used[task] != 0</label>
			<label kind="assignment" x="-2779" y="-2541">run_time[task] = 
getDeadline(),
exe_time = 0</label>
			<nail x="-2643" y="-2618"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-2966" y="-2550">release[sat_id]!</label>
			<nail x="-2856" y="-2524"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="guard" x="-2991" y="-2685">!empty(w_queue) &amp;&amp;
getWaitingD() &lt; run_time[task] 
+ getRemaining()</label>
			<label kind="assignment" x="-2992" y="-2635">delayed(w_queue[0]),
resume_task()</label>
			<nail x="-2974" y="-2796"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id34"/>
			<label kind="guard" x="-3102" y="-2873">!empty(w_queue) &amp;&amp;
getWaitingD() &gt;= run_time[task] 
+ getRemaining()</label>
			<label kind="synchronisation" x="-3102" y="-2822">next[sat_id]!</label>
			<label kind="assignment" x="-3111" y="-2805">resume_task()</label>
			<nail x="-2855" y="-2821"/>
			<nail x="-3000" y="-2821"/>
			<nail x="-3000" y="-2473"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id34"/>
			<label kind="guard" x="-2932" y="-2762">empty(w_queue)</label>
			<label kind="synchronisation" x="-2932" y="-2745">release[sat_id]!</label>
			<label kind="assignment" x="-2932" y="-2728">active[sat_id] = -1</label>
			<nail x="-2813" y="-2762"/>
			<nail x="-2814" y="-2609"/>
			<nail x="-2856" y="-2609"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-2192" y="-2677">preemt[sat_id]?</label>
			<nail x="-2137" y="-2761"/>
			<nail x="-2137" y="-2609"/>
			<nail x="-2137" y="-2473"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id33"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-2252" y="-2533">preemt[sat_id]?</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-2575" y="-2864">release[sat_id]!</label>
			<label kind="assignment" x="-2448" y="-2864">delayed(task)</label>
			<nail x="-2660" y="-2864"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id30"/>
			<label kind="assignment" x="-2642" y="-2796">pre++</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id28"/>
			<label kind="guard" x="-2550" y="-2771">task == RECEIVE_INDEX ||
task == TRANSMIT_INDEX</label>
			<label kind="synchronisation" x="-2533" y="-2737">release[sat_id]?</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-2345" y="-2681">release[sat_id]?</label>
			<nail x="-2337" y="-2697"/>
			<nail x="-2329" y="-2705"/>
			<nail x="-2345" y="-2721"/>
			<nail x="-2353" y="-2713"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-2396" y="-2813">release[sat_id]?</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id27"/>
			<label kind="guard" x="-2311" y="-2838">run_time[task] &gt;= getDeadline()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id29"/>
			<label kind="guard" x="-2439" y="-2465">activeIsTrans() &amp;&amp; 
orientation(sat_id) &amp;&amp; 
run_time[task] &lt;= 
getDeadline()</label>
			<label kind="assignment" x="-2439" y="-2397">startNew()</label>
			<nail x="-2635" y="-2397"/>
			<nail x="-2125" y="-2397"/>
			<nail x="-2124" y="-2796"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-2337" y="-2779">request[sat_id]?</label>
			<label kind="assignment" x="-2337" y="-2762">exe_time = 0,
calc_cost()</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id29"/>
			<label kind="guard" x="-2274" y="-2730">isInternalCom() &amp;&amp;
orientation(sat_id)</label>
			<label kind="synchronisation" x="-2274" y="-2696">slew_sat[sat_id]?</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id25"/>
			<label kind="assignment" x="-2822" y="-2864">resetPriority(),
resetProgress(),
active[sat_id] = 
w_queue[0]</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id30"/>
			<label kind="guard" x="-2771" y="-2762">run_time[task] &gt;= 
getDeadline() &amp;&amp; 
exe_time + time_used[task]  &lt; 
getExeTime()</label>
			<label kind="assignment" x="-2771" y="-2694">delayed(task)</label>
			<nail x="-2660" y="-2643"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="guard" x="-2351" y="-2594">!isInternalCom() &amp;&amp;
orientation(sat_id)</label>
			<label kind="synchronisation" x="-2351" y="-2560">slew_sat[sat_id]?</label>
			<label kind="assignment" x="-2351" y="-2543">exe_time = 0</label>
			<nail x="-2345" y="-2592"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="guard" x="-2413" y="-2651">!orientation(sat_id)</label>
			<label kind="synchronisation" x="-2405" y="-2634">slew_sat[sat_id]!</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id30"/>
			<label kind="guard" x="-2618" y="-2703">exe_time + time_used[task] 
== getExeTime()</label>
			<label kind="assignment" x="-2618" y="-2669">update_storage(task),
reportDone()</label>
			<nail x="-2577" y="-2713"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="assignment" x="-2456" y="-2541">exe_time = 0,
calc_cost(),
pre++</label>
			<nail x="-2425" y="-2489"/>
			<nail x="-2425" y="-2593"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="guard" x="-2584" y="-2567">task != active[sat_id]</label>
			<label kind="synchronisation" x="-2584" y="-2550">request[sat_id]?</label>
			<label kind="assignment" x="-2584" y="-2533">preemt_task()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id32"/>
			<label kind="guard" x="-2626" y="-2482">rdyToRun() &amp;&amp;
run_time[task] &lt;= 
getDeadline()</label>
			<label kind="assignment" x="-2626" y="-2431">startNew(),
calc_cost()</label>
			<nail x="-2609" y="-2473"/>
			<nail x="-2609" y="-2618"/>
		</transition>
	</template>
	<template>
		<name>Satellite</name>
		<parameter>const id_s sat_id</parameter>
		<declaration>clock loc_time, slew_time;
int selected = -1;

/** Change satellite orientation */
void turn_satellite(){
	if (sats[sat_id].rotation &lt; jobs[active[sat_id]].orientation){sats[sat_id].rotation ++;}
	else if (sats[sat_id].rotation &gt; jobs[active[sat_id]].orientation){sats[sat_id].rotation --;}
}

/** Suggest a new task to execute */
void suggest_task(){
	int i, j, k, count = 0, high = 0;
	selected = -1;

	for (i = 0; i &lt; N - 1; i++) {
		if (sats[sat_id].available_tasks[i]) {
			if (sats[sat_id].memory &lt;= LOW_MEMORY ) {
				if (jobs[i].data_rate &gt; 0) {
					if (priorities[sat_id][i]*2 &lt;= 100) {
						priorities[sat_id][i] = priorities[sat_id][i] * 2; 
					}
					else {
						priorities[sat_id][i] = 100;
					}
				}
				else if (jobs[i].data_rate &lt; 0) {
					priorities[sat_id][i] = 0;
				}
			}
			else if (sats[sat_id].memory &gt;= HIGH_MEMORY) {
				if (jobs[i].data_rate &lt; 0) {
					if (priorities[sat_id][i]*2 &lt;= 100) {
						priorities[sat_id][i] = priorities[sat_id][i] * 2; 
					}
					else {
						priorities[sat_id][i] = 100;
					}
				}
				else if (jobs[i].data_rate &gt; 0) {
					priorities[sat_id][i] = 0;
				} 
			}
		}
	}

	//TODO make logic for handeling ties
	for (i = 0; i &lt; N - 1; i++) {
		if (sats[sat_id].available_tasks[i] &amp;&amp; priorities[sat_id][i] &gt; high) {
			if(i != RECEIVE_INDEX ) {  // it is invalid to suggest a reeive task (It's the transferee that takes initiatve)
				selected = i;
				high = priorities[sat_id][i];
			}
		}
	}
	sats[sat_id].suggested_task = selected;
}
</declaration>
		<location id="id35" x="-216" y="-576">
			<committed/>
		</location>
		<location id="id36" x="-816" y="-576">
			<name x="-864" y="-584">Start</name>
			<label kind="invariant" x="-867" y="-629">t_time &lt;= 
sats[sat_id].offset</label>
		</location>
		<location id="id37" x="-720" y="-464">
			<name x="-768" y="-456">Slewing</name>
			<label kind="invariant" x="-816" y="-440">slew_time &lt;= 3</label>
		</location>
		<location id="id38" x="-216" y="-464">
			<name x="-256" y="-456">Checking</name>
			<committed/>
		</location>
		<location id="id39" x="-528" y="-464">
			<name x="-544" y="-448">Waiting</name>
			<label kind="invariant" x="-544" y="-432">loc_time &lt;= TASK_SUGGEST_INTERVAL</label>
		</location>
		<init ref="id36"/>
		<transition>
			<source ref="id37"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="-672" y="-432">release[sat_id]?</label>
			<label kind="assignment" x="-672" y="-416">loc_time = 0</label>
			<nail x="-688" y="-416"/>
			<nail x="-576" y="-416"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id39"/>
			<label kind="guard" x="-504" y="-600">!validSuggestion(sat_id)</label>
			<nail x="-528" y="-576"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id39"/>
			<label kind="guard" x="-496" y="-576">validSuggestion(sat_id)</label>
			<label kind="synchronisation" x="-496" y="-552">add_task[sat_id]!</label>
			<nail x="-288" y="-552"/>
			<nail x="-512" y="-552"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id39"/>
			<label kind="guard" x="-714" y="-629">t_time &gt;= 
sats[sat_id].offset</label>
			<label kind="assignment" x="-705" y="-578">loc_time = 0</label>
			<nail x="-552" y="-576"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id39"/>
			<label kind="guard" x="-672" y="-544">orientation(sat_id)</label>
			<label kind="synchronisation" x="-672" y="-528">slew_sat[sat_id]!</label>
			<label kind="assignment" x="-672" y="-504">loc_time = 0</label>
			<nail x="-688" y="-504"/>
			<nail x="-576" y="-504"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id37"/>
			<label kind="guard" x="-848" y="-536">slew_time &gt;= 3 &amp;&amp;
!orientation(sat_id)</label>
			<label kind="assignment" x="-848" y="-496">turn_satellite(),
slew_time = 0</label>
			<nail x="-856" y="-464"/>
			<nail x="-856" y="-496"/>
			<nail x="-736" y="-496"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id35"/>
			<label kind="assignment" x="-312" y="-536">loc_time = 0,
suggest_task()</label>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id38"/>
			<label kind="guard" x="-496" y="-488">loc_time &gt;= TASK_SUGGEST_INTERVAL</label>
			<label kind="synchronisation" x="-510" y="-481">find_new!</label>
			<label kind="assignment" x="-496" y="-464">RQ = sat_id</label>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-672" y="-480">slew_sat[sat_id]?</label>
			<label kind="assignment" x="-672" y="-464">slew_time = 0</label>
		</transition>
	</template>
	<template>
		<name>CheckRunnable</name>
		<declaration>bool all_checked = false;
int window_to_check = 0, task_to_check = 0;
int station = 0;
bool station_to_check = false;
bool can_run = false;
int index[S][STATIONS] = {{0,0},{0,0},{0,0}};

void overStation(){
    if (OVER_STATION[index[RQ][window_to_check]][window_to_check][2])
    {
        can_run = true;
    }else{
        can_run = false;
    }
}

void next() {
    if (task_to_check &lt; N) {
        if (window_to_check &lt; STATIONS-1) {
            window_to_check++;
        }
        else {
            task_to_check ++;
            window_to_check = 0;     
        }
    }
    else {
        all_checked = true;
        task_to_check = 0;
        window_to_check = 0;
    }
}


void resetRunnable() {
	int i;
	for (i = 0; i &lt; N; i++) {
		runnable[i] = 0;
	}
}


/** text */ 
bool independent(){ 
	int i = 0, count = 0;
	
	for (i = 0; i &lt; STATIONS; i++){
		if (!jobs[task_to_check].depend_station[i]) {
			count ++;
		}
		if (count == STATIONS) {
			return true;
		}
	}
	return false;
}

void allTaskChecked(){
	if (task_to_check +1 == N){
		all_checked = true;
		task_to_check = 0;
		window_to_check = 0;
	}
    else task_to_check += 1;
}

void skipWindowCheck() {
	runnable[task_to_check] = true;

}

int windowEnd() {
	return OVER_STATION[index[RQ][window_to_check]][window_to_check][1];
}

int windowStart() {
    return OVER_STATION[index[RQ][window_to_check]][window_to_check][0];
}

bool depends() {
	return jobs[task_to_check].depend_station[window_to_check];
}

//TODO overhold at vi ikke går ud over et vindue</declaration>
		<location id="id40" x="102" y="-212">
			<committed/>
		</location>
		<location id="id41" x="-306" y="-357">
			<name x="-316" y="-387">Wait</name>
		</location>
		<location id="id42" x="-119" y="-212">
			<committed/>
		</location>
		<location id="id43" x="-306" y="-212">
			<committed/>
		</location>
		<init ref="id41"/>
		<transition>
			<source ref="id40"/>
			<target ref="id40"/>
			<label kind="guard" x="136" y="-408">windowEnd() &gt;= t_time - sats[RQ].offset &amp;&amp;
windowEnd() &lt; t_time - sats[RQ].offset +
jobs[task_to_check].execution_time 
&amp;&amp; windowStart() &lt;= t_time - sats[RQ].offset
&amp;&amp; station_to_check</label>
			<label kind="assignment" x="136" y="-314">station_to_check = false,
can_run = false</label>
			<nail x="68" y="-383"/>
			<nail x="127" y="-383"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id43"/>
			<label kind="guard" x="-195" y="-102">!station_to_check &amp;&amp; !can_run</label>
			<label kind="assignment" x="-221" y="-76">win_active[window_to_check] = can_run,
next()</label>
			<nail x="25" y="-76"/>
			<nail x="-229" y="-76"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id43"/>
			<label kind="guard" x="-195" y="-178">can_run &amp;&amp; !station_to_check</label>
			<label kind="assignment" x="-221" y="-153">runnable[task_to_check] = true, next(),
win_active[window_to_check] = can_run</label>
			<nail x="25" y="-153"/>
			<nail x="-238" y="-153"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id40"/>
			<label kind="guard" x="136" y="-263">windowEnd() &lt; t_time - sats[RQ].offset
&amp;&amp; index[RQ][window_to_check] &lt; STATION_INDEX-1</label>
			<label kind="assignment" x="280" y="-212">index[RQ][window_to_check]++</label>
			<nail x="450" y="-212"/>
			<nail x="450" y="-169"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id40"/>
			<label kind="guard" x="144" y="-136">windowEnd() &gt;= t_time - sats[RQ].offset +
jobs[task_to_check].execution_time  &amp;&amp;
windowStart() &lt;= t_time - sats[RQ].offset
&amp;&amp; station_to_check</label>
			<label kind="assignment" x="144" y="-59">station_to_check = false,
overStation()</label>
			<nail x="136" y="-25"/>
			<nail x="85" y="-25"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id40"/>
			<label kind="guard" x="-56" y="-240">depends()</label>
			<label kind="assignment" x="-102" y="-216">station_to_check = true,
can_run = false</label>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id43"/>
			<label kind="guard" x="-382" y="-161">independent()</label>
			<label kind="assignment" x="-399" y="-144">skipWindowCheck(),
allTaskChecked()</label>
			<nail x="-370" y="-196"/>
			<nail x="-346" y="-156"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id43"/>
			<label kind="synchronisation" x="-391" y="-306">check?</label>
			<label kind="assignment" x="-433" y="-289">resetRunnable()</label>
			<nail x="-399" y="-357"/>
			<nail x="-399" y="-212"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id43"/>
			<label kind="guard" x="-272" y="-272">!depends()</label>
			<label kind="assignment" x="-195" y="-272">next()</label>
			<nail x="-212" y="-255"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id42"/>
			<label kind="guard" x="-263" y="-229">!all_checked &amp;&amp;
!independent()</label>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id41"/>
			<label kind="guard" x="-297" y="-331">all_checked</label>
			<label kind="synchronisation" x="-297" y="-314">check!</label>
			<label kind="assignment" x="-297" y="-297">all_checked = false</label>
		</transition>
	</template>
	<system>p0 = Processor(0);
p1 = Processor(1);
p2 = Processor(2);
s0 = Satellite(0);
s1 = Satellite(1);
s2 = Satellite(2);
sc0 = Scheduler(0);
sc1 = Scheduler(1);
sc2 = Scheduler(2);
system CheckRunnable &lt; sc0 &lt; sc1 &lt; sc2 &lt; s0 &lt; s1 &lt; s2 &lt; p0 &lt; p1 &lt; p2;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; p0.Free &amp;&amp; p1.Free &amp;&amp;  delayed[2][3] == 1
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; p2.Free &amp;&amp; p1.Free &amp;&amp; runs[1][2] &gt; runs[2][3]
			</formula>
			<comment>Don't fucking delete me!
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i : id_s) Processor(i).Occupied
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E[&lt;=1; 1330](max: sats[2].memory)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i : id_t) forall (j : id_t) runs[i][j]+1 &lt; runs[i][j] &amp;&amp; t_time &lt; 600
			</formula>
			<comment>== runs[j] &amp;&amp; i != j
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; CheckRunnable.index[0] == STATION_INDEX -1
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; delayed[0][2] == 1
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; delayed[1][2] &gt; delayed[2][3] +1 &amp;&amp; p2.Free &amp;&amp; p1.Free
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Scheduler(0).KK &amp;&amp; active[0] == 1
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Scheduler(0).AA &amp;&amp; t_time &gt;= 200
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; t_time &gt;=20
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Scheduler(1).pre_in
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; t_time &gt;=1440
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; t_time == 720
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; t_time &gt;= 83
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; t_time &gt;=640 &amp;&amp; Scheduler(0).AA
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; runs[1][2] &gt; runs[2][3] &amp;&amp; p1.Free &amp;&amp; p2.Free &amp;&amp; t_time &lt;= 1440
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; priorities[0][1] == 0
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
