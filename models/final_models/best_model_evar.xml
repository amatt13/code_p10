<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int N = 4; // Amount of tasks
const int S = 30; // Amount of satellites
const int SCHEDULE_LENGHT = 360; // Length of schedule
const int ORBIT_TIME = 60; // duration of one orbit
const int MAX_MEMORY = 100; // satellites maximum storage capacity
const int LOW_MEMORY = MAX_MEMORY * 30/100; // threshold for when  little memory is used
const int HIGH_MEMORY = MAX_MEMORY * 75/100; // threshold for when a lot memory is used
const int RECEIVE_INDEX = 3; // the index for the receive task
const int TRANSMIT_INDEX = 2; // the index for the internal send task
const int TASK_SUGGEST_INTERVAL = 2; // how often should a task be suggested


// used for common instansiations of arrays
const int ZEROES[N] = {0,0,0,0};
const int ZEROES_S[S] = {0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0};
const int S_ZEROES[S][N] = {ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES, 
ZEROES};
const int MINUSSES[N] = {-1,-1,-1,-1};
const int S_MINUSSES[S][N] = {MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES,
                              MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES, MINUSSES};
const int ACTIVE_INIT[S] = {-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1, 
-1};

typedef int[0, N-1] id_t;
typedef int[0, S-1] id_s;

// Describes time intervals where windows are open i.e. comunnication with Earth is possible
const int STATION_INDEX = 33; // changes for; when station are in range
const int STATIONS = 2; // amount of windows i.e. stations to which can be communicated
const int STATION_ATTRI = 3; // elements discribing window
// Start_time, End_time, active or not
const int OVER_STATION[STATION_INDEX][STATIONS][STATION_ATTRI] = {
{{0, 51, 1}, {0, 40, 1}},        //51, 31
{{52, 68, 0}, {41, 79, 0}},      //16, 46
{{69, 139, 1}, {80, 120, 1}},    //70, 40
{{140, 156, 0}, {121, 166, 0}},  //16, 45
{{157, 227, 1}, {167, 209, 1}},  //70, 42
{{228, 245, 0}, {210, 255, 0}},  //17, 45
{{246, 316, 1}, {256, 297, 1}},
{{317, 333, 0}, {298, 343, 0}},
{{334, 404, 1}, {344, 385, 1}},
{{405, 421, 0}, {386, 432, 0}},
{{422, 492, 1}, {433, 474, 1}},
{{493, 510, 0}, {475, 520, 0}},
{{511, 581, 1}, {521, 562, 1}},
{{582, 598, 0}, {563, 608, 0}},
{{599, 669, 1}, {609, 650, 1}},
{{670, 686, 0}, {651, 696, 0}},
{{687, 757, 1}, {697, 738, 1}},
{{758, 775, 0}, {739, 784, 0}},
{{776, 846, 1}, {785, 827, 1}},
{{847, 863, 0}, {828, 873, 0}},
{{864, 934, 1}, {874, 915, 1}},
{{935, 951, 0}, {916, 961, 0}},
{{952, 1022, 1}, {962, 1003, 1}},
{{1023, 1040, 0}, {1004, 1049, 0}},
{{1041, 1111, 1}, {1050, 1092, 1}},
{{1112, 1128, 0}, {1093, 1137, 0}},
{{1129, 1199, 1}, {1138, 1180, 1}},
{{1200, 1216, 0}, {1181, 1226, 0}},
{{1217, 1287, 1}, {1227, 1268, 1}},
{{1288, 1305, 0}, {1269, 1314, 0}},
{{1306, 1376, 1}, {1315, 1357, 1}},
{{1377, 1393, 0}, {1358, 1403, 0}},
{{1394, 1440, 1}, {1404, 1440, 1}}};

clock t_time; // total amount of time passed
urgent broadcast chan release[S], request[S], add_task[S], check, not_rdy_to_rec[S], go, transmit_data[S];
broadcast chan next[S], find_new;
chan priority find_new, default &lt; go;

/** Task Description */
typedef struct {
	bool depend_station[STATIONS];  // what stations must the satellite be in range of to perform the task
	int execution_time;  // how long does task take to execute
	int deadline;        // task deadline
	int prio;            // tasks priority
	int data_rate;       // how fast the task increase or decrease storage
	int orientation;     // what orientation must the satellite have to perform task
} TaskDescription;

/** Satellite Description */
typedef struct {
	int offset;                // when does the satellite "start"
	int rotation;              // what is the current orientation of the satellite
	int memory;                // current amount stored
	bool available_tasks[N];   // what tasks can the satellite perform
	int suggested_task;        // what task should be performed next
} SatDescription;

// Some tasks, with different propperties
				      /* 0 = forward, 1 = earth, 2 = backwards*/
                                      /*  w     E  D   P  rate Co   Orien*/
const TaskDescription send_data       = {{0,1}, 23,29, 9, -2, 0};
const TaskDescription gather_new_data = {{1,0}, 18,24,  6,  2, 0};
const TaskDescription transfer        = {{0,0}, 8,20,  5, -3, 0};
const TaskDescription receive         = {{0,0}, 8,14,  4,  3, 0};
const TaskDescription jobs[N]         = {send_data, gather_new_data, transfer, receive}; //update RECEIVE_INDEX if receive moves
const int PRIOS[N] = {jobs[0].prio, jobs[1].prio, jobs[2].prio, jobs[3].prio};

// some satellites performing different tasks and with different offset
const SatDescription sat_gat = {3, 0, 50, {0,1,1,1}, -1};
const SatDescription sat_first = {3, 0, 80, {0,1,1,0}, -1};
const SatDescription sat_trans = {3, 0, 20, {0,1,1,1}, -1};
const SatDescription sat_sen = {9, 2, 80, {1,0,1,1}, -1};
const SatDescription sat_last = {9, 2, 50, {1,0,0,1}, -1};
SatDescription sats[S] = {sat_first, sat_trans, sat_sen,sat_gat, sat_trans, sat_sen,sat_gat, sat_trans, sat_sen,sat_gat, sat_trans, sat_sen,sat_gat, sat_trans, sat_sen,
                          sat_trans, sat_sen, sat_gat, sat_trans, sat_sen, sat_gat, sat_trans, sat_sen,sat_gat, sat_trans, sat_sen,sat_gat, sat_trans, sat_sen,sat_last};

/** Remove StationDescription and replace with array over costrate */
const int station_price_rate[STATIONS] = {13, 8};


/** Variables */
id_s RQ;
int sugest_iterations[S] = ZEROES_S;
bool runnable[N] = {0,0,0,0};    // can this task be performed
//bool win_active[STATIONS] = {0,0};      // it the satellite currently over a station
int runs[S][N] = S_ZEROES;       // how many times have each task been run on each satellite (for benchmarking)
int win_active[STATIONS] = {0,0};
int priorities[S][N] = {PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS,
                        PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS, PRIOS};
int active[S] = ACTIVE_INIT;
int queue[S][N] = S_MINUSSES;
int sender = -1;
int delays[S][N] = S_ZEROES; //(for benchmarking)
int data_earth = 0; // Amount of data units sent to Earth (for benchmarking)
int data_internal = 0; // Amount of data sent internaly between satellites (for benchmarking)
int data_gathered = 0; // Amount of data currently stored in the system (for benchmarking)
bool in_orbit[S];
int band_cost = 0; // accumulated bandwith cost
int w1 = 0, w2 = 0;
// Scheduling
int sch_time[S] = {3, 3, 9,3, 3, 9,3, 3, 9,3, 3, 9,3, 3, 9, 3, 9, 3, 3, 9, 3, 3, 9,3, 3, 9,3, 3, 9,9};


bool empty(int q[N]){
	int i = 0;
	for (i = 0; i &lt; N; i++){
		if(q[i] != -1){
			return false;
		}
	}
	return true;
}

bool orientation(int sat_id){
    if (jobs[active[sat_id]].orientation == -1) return true;
	else if (sats[sat_id].rotation != jobs[active[sat_id]].orientation) return false;
	else return true;
}

bool validSuggestion(int id) {
	return sats[id].suggested_task != -1;
}



</declaration>
	<template>
		<name>Scheduler</name>
		<parameter>const id_s sat_id</parameter>
		<declaration>int task = 0;
int com = 0;
int is_synced = false;
const int TI = TRANSMIT_INDEX;
const int RI = RECEIVE_INDEX;
int current;
/** order the queue to highest priority in front */
void orderQueue(){ //OI! Look here
	int i, temp = -1, selected = -1, high = -1, to_check = -1;
	 
	if(queue[sat_id][0] == -1){ return; }
	for (i = 0; i &lt; N; i++){
		if (queue[sat_id][i] != -1) {
			to_check = queue[sat_id][i];
			if (runnable[to_check] == 1) {
				if(priorities[sat_id][to_check] &gt; high){
					selected = i;
					high = priorities[sat_id][to_check];
	}}}}
	if (selected != -1) {
		temp = queue[sat_id][selected];
		queue[sat_id][selected] = queue[sat_id][0];
		queue[sat_id][0] = temp;
	}

}
/** Add task to back of queue */
void enqueue(int _task){
	int i = 0;
    if (_task == active[sat_id])
        return;
	if (queue[sat_id][N-1] == -1){
	for (i = 0; i &lt; N; i++){
		if (queue[sat_id][i] == -1){
			queue[sat_id][i] = _task; 
			i = N;
		} else if (queue[sat_id][i] == _task) {
			return;
		}}
	}
	orderQueue();
	
}
/** Amount of queued tasks */
int len(){ 
	int i;
	for (i = 0; i &lt; N; i++){
		if(queue[sat_id][i] == -1) {
			return i; 
		}
	}
	return N;
}
/** Update the queue after running the first one */
void dequeue(){
	int i = 0, k = len();
        while (i &lt; k) {
        	queue[sat_id][i] = queue[sat_id][i + 1];
                i++;
        }
        queue[sat_id][i] = -1;
	orderQueue();
}

void set_com(){
    if (sat_id == S-1) com = sat_id;
    else com = sat_id + 1;
}

bool hasSpace(){
	return sats[sat_id].memory + receive.data_rate * receive.execution_time &lt;= MAX_MEMORY;
}

int orientationProgress(){
	if (sats[sat_id].rotation == transfer.orientation &amp;&amp; sats[com].rotation == receive.orientation){
		return 0;
	}
	else if (sats[sat_id].rotation == transfer.orientation &amp;&amp; sats[com].rotation != receive.orientation){
		return 1;
	}
	else if (sats[sat_id].rotation != transfer.orientation &amp;&amp; sats[com].rotation == receive.orientation){
		return 2;
	}
	else{   
		return 3;
	}
}
bool rdyToTrans(){
	if (true &amp;&amp; true) return true;
	else return false;
}


bool lowerPriority() {
	return priorities[sat_id][task] &lt;= priorities[sat_id][active[sat_id]];
}


int front() {
    //if (queue[sat_id][0] &lt; 0) {return 2/0;}
	return queue[sat_id][0];
}

bool internalCom() {
	return (current == RECEIVE_INDEX || current == TRANSMIT_INDEX);
}






















</declaration>
		<location id="id0" x="110" y="-246">
			<committed/>
		</location>
		<location id="id1" x="433" y="323">
			<committed/>
		</location>
		<location id="id2" x="722" y="51">
			<committed/>
		</location>
		<location id="id3" x="110" y="-136">
			<committed/>
		</location>
		<location id="id4" x="376" y="-264">
			<committed/>
		</location>
		<location id="id5" x="391" y="51">
			<committed/>
		</location>
		<location id="id6" x="552" y="51">
			<name x="542" y="17">Slewing</name>
			<urgent/>
		</location>
		<location id="id7" x="336" y="-208">
			<committed/>
		</location>
		<location id="id8" x="-76" y="-221">
			<committed/>
		</location>
		<location id="id9" x="-229" y="127">
			<committed/>
		</location>
		<location id="id10" x="-229" y="59">
			<committed/>
		</location>
		<location id="id11" x="110" y="0">
			<committed/>
		</location>
		<location id="id12" x="229" y="-136">
			<name x="253" y="-152">Release</name>
			<committed/>
		</location>
		<location id="id13" x="229" y="127">
			<name x="247" y="104">Occupied</name>
		</location>
		<location id="id14" x="-76" y="127">
			<committed/>
		</location>
		<location id="id15" x="-76" y="-136">
			<name x="-65" y="-130">Start</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="178" y="-263">not_rdy_to_rec[sat_id]!</label>
			<nail x="357" y="-246"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id0"/>
			<label kind="guard" x="-51" y="-246">!hasSpace() || !in_orbit[sat_id]</label>
			<label kind="synchronisation" x="-42" y="-229">transmit_data[sat_id]?</label>
			<nail x="-17" y="-246"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id13"/>
			<label kind="guard" x="518" y="229">active[sat_id] != RECEIVE_INDEX</label>
			<label kind="synchronisation" x="518" y="246">not_rdy_to_rec[sat_id]!</label>
			<nail x="510" y="323"/>
			<nail x="510" y="221"/>
			<nail x="306" y="221"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id13"/>
			<label kind="guard" x="391" y="238">active[sat_id] ==
RECEIVE_INDEX</label>
			<nail x="433" y="238"/>
			<nail x="280" y="238"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id6"/>
			<label kind="guard" x="561" y="76">active[com] != TRANSMIT_INDEX</label>
			<nail x="722" y="76"/>
			<nail x="552" y="76"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="612" y="25">check?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="663" y="-25">active[com] == 
TRANSMIT_INDEX</label>
			<nail x="722" y="-263"/>
			<nail x="671" y="-263"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id4"/>
			<label kind="guard" x="323" y="170">active[sat_id] == TRANSMIT_INDEX</label>
			<label kind="synchronisation" x="399" y="187">not_rdy_to_rec[com]?</label>
			<nail x="314" y="144"/>
			<nail x="314" y="187"/>
			<nail x="688" y="187"/>
			<nail x="688" y="-263"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="255" y="263">transmit_data[sat_id]?</label>
			<label kind="assignment" x="255" y="289">task = RECEIVE_INDEX</label>
			<nail x="246" y="280"/>
			<nail x="331" y="280"/>
			<nail x="331" y="323"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id3"/>
			<label kind="guard" x="76" y="-170">active[com] != RECEIVE_INDEX</label>
			<nail x="224" y="-160"/>
			<nail x="144" y="-160"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id3"/>
			<label kind="guard" x="110" y="-136">active[com] == 
RECEIVE_INDEX</label>
			<label kind="synchronisation" x="144" y="-102">release[com]!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-40" y="-280">release[sat_id]!</label>
			<label kind="assignment" x="-40" y="-264">active[sat_id] = -1</label>
			<nail x="-48" y="-264"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="450" y="-246">task == TRANSMIT_INDEX</label>
			<label kind="synchronisation" x="450" y="-229">not_rdy_to_rec[com]?</label>
			<nail x="552" y="-263"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="255" y="17">transmit_data[com]!</label>
			<nail x="272" y="51"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="416" y="25">rdyToTrans()</label>
			<label kind="synchronisation" x="416" y="51">request[sat_id]!</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id6"/>
			<label kind="guard" x="331" y="85">task == TRANSMIT_INDEX
&amp;&amp; !is_synced &amp;&amp;
active[com] != TRANSMIT_INDEX</label>
			<label kind="synchronisation" x="459" y="136">go!</label>
			<label kind="assignment" x="340" y="136">is_synced = true</label>
			<nail x="552" y="127"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="288" y="-80">request[sat_id]!</label>
			<nail x="336" y="-32"/>
			<nail x="248" y="0"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id7"/>
			<label kind="guard" x="204" y="-238">hasSpace()</label>
			<label kind="synchronisation" x="161" y="-221">transmit_data[sat_id]?</label>
			<label kind="assignment" x="76" y="-204">task = RECEIVE_INDEX,
active[sat_id] = RECEIVE_INDEX</label>
			<nail x="0" y="-208"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id15"/>
			<label kind="assignment" x="-144" y="-195">set_com()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-184" y="128">check?</label>
			<label kind="assignment" x="-248" y="144">enqueue(task),
active[sat_id] = front()</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-224" y="80">check!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="-176" y="-48">queue[sat_id][0] == -1 ||
!runnable[queue[sat_id][0]]</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-17" y="34">check?</label>
			<label kind="assignment" x="-17" y="0">orderQueue(),
active[sat_id] = front()</label>
			<nail x="-25" y="0"/>
			<nail x="-25" y="85"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id15"/>
			<label kind="guard" x="-48" y="-152">empty(queue[sat_id])</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id11"/>
			<label kind="guard" x="8" y="-85">!empty(queue[sat_id])</label>
			<label kind="synchronisation" x="59" y="-68">check!</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="guard" x="25" y="212">validSuggestion(sat_id)</label>
			<label kind="synchronisation" x="59" y="229">add_task[sat_id]?</label>
			<label kind="assignment" x="-17" y="246">enqueue(sats[sat_id].suggested_task)</label>
			<nail x="229" y="289"/>
			<nail x="170" y="289"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="170" y="-51">release[sat_id]?</label>
			<label kind="assignment" x="170" y="-34">orderQueue(),
RQ = sat_id</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-8" y="68">queue[sat_id][0] != -1 &amp;&amp; 
runnable[queue[sat_id][0]] &amp;&amp;
active[sat_id] != -1</label>
			<label kind="synchronisation" x="-8" y="127">request[sat_id]!</label>
			<label kind="assignment" x="-8" y="144">dequeue(), is_synced = false,
task = active[sat_id]</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-221" y="-102">add_task[sat_id]?</label>
			<label kind="assignment" x="-289" y="-85">task = sats[sat_id].suggested_task</label>
			<nail x="-229" y="-136"/>
		</transition>
	</template>
	<template>
		<name>Processor</name>
		<parameter>const id_s sat_id</parameter>
		<declaration>clock exe_time;
int task = 0;
int price;
int expenses;


                // task, start, end
int schedule[110][3];
int index = 0;


void sch_start() {
    schedule[index][0] = active[sat_id];
    schedule[index][1] = sch_time[sat_id];
}

void sch_end() {
    schedule[index][2] = sch_time[sat_id];
    index += 1;
}

void resetPriority() {
    int i;
    priorities[sat_id][task] = jobs[task].prio;
    for(i = 0; i &lt; N; i++){
        if (priorities[sat_id][i] == 0){
            priorities[sat_id][i] = jobs[i].prio;
        }
    }
}

void boostPriority(){
    priorities[sat_id][task] = priorities[sat_id][active[sat_id]];
}

void calc_cost() {
    int i = 0;
    price = 9999;
    for (i = 0; i &lt; STATIONS; i++){
        if(jobs[task].depend_station[i] &amp;&amp; runnable[task] &amp;&amp; win_active[i]) {
            if (price &gt; station_price_rate[i] * jobs[task].execution_time){
                price = (station_price_rate[i] * jobs[task].execution_time) - (station_price_rate[i] * 3); //choose cheapest
            }
        }
    }
    if (price == 9999) {
        price = 0;
    }
}

void statistics(int value){
    if (task == 0){
        data_earth += value*-1;
    }
    else if (task == 1){
        data_gathered += value;
    }
    else if (task == 2) {
        data_internal += value*-1;
    }
}

void update_storage(int t) {
   int memory = (jobs[t].execution_time * jobs[t].data_rate) - (jobs[t].data_rate * 3);
   if (sats[sat_id].memory + memory &gt; MAX_MEMORY) { // add above
           memory = MAX_MEMORY - sats[sat_id].memory;
           sats[sat_id].memory = MAX_MEMORY;
   }
   else if (sats[sat_id].memory + memory &lt; 0) { // remove below
           memory = sats[sat_id].memory*-1;
           sats[sat_id].memory = 0;
   }
   else {
       sats[sat_id].memory += memory;
   }
   statistics(memory); // adds nothing if 0
}

void update_band_cost(int t) {
   if (t == 0 || t == 1)  // task is "send_data"
       band_cost += price;
       if (price == station_price_rate[0] * jobs[task].execution_time)
           w1 += 1;
       else if (price == station_price_rate[1] * jobs[task].execution_time)
           w2 += 1;
}

void reportDone() {
    runs[sat_id][task] ++;
    
    expenses = expenses + price;

}


void startNew(){
    task = active[sat_id];
    exe_time = 0;
    calc_cost();
}

bool isInternalCom(){
    if (task == RECEIVE_INDEX|| task == TRANSMIT_INDEX) return true;
    else return false;
}


bool activeTrans() {
    return active[sat_id] == TRANSMIT_INDEX;
}

int getDeadline() {
    return jobs[task].deadline;
}

int getExeTime() {
    return jobs[task].execution_time;
}

bool activeIsTrans() {
    return active[sat_id] == TRANSMIT_INDEX;
}

bool rdyToRun() {
    return (!activeTrans() || (activeTrans()));
}

void delayed(int t) {
    delays[sat_id][t] ++;
}











</declaration>
		<location id="id16" x="-2779" y="-2618">
			<committed/>
		</location>
		<location id="id17" x="-2643" y="-2618">
			<committed/>
		</location>
		<location id="id18" x="-2856" y="-2796">
			<committed/>
		</location>
		<location id="id19" x="-2218" y="-2864">
			<committed/>
		</location>
		<location id="id20" x="-2473" y="-2796">
			<name x="-2497" y="-2828">Aborted</name>
			<committed/>
		</location>
		<location id="id21" x="-2218" y="-2618">
			<name x="-2210" y="-2642">Waiting</name>
			<label kind="invariant" x="-2210" y="-2609">exe_time &lt;= 
getDeadline()</label>
		</location>
		<location id="id22" x="-2643" y="-2796">
			<name x="-2683" y="-2820">End</name>
			<committed/>
		</location>
		<location id="id23" x="-2473" y="-2617">
			<name x="-2456" y="-2618">Occupied</name>
			<label kind="invariant" x="-2499" y="-2601">exe_time &lt;= 
getDeadline() &amp;&amp;
exe_time &lt;= 
getExeTime()</label>
		</location>
		<location id="id24" x="-2856" y="-2618">
			<name x="-2899" y="-2643">Free</name>
		</location>
		<init ref="id24"/>
		<transition>
			<source ref="id16"/>
			<target ref="id24"/>
			<label kind="guard" x="-2907" y="-2575">active[sat_id] &lt; 0</label>
			<label kind="synchronisation" x="-2898" y="-2558">release[sat_id]!</label>
			<nail x="-2822" y="-2575"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-2771" y="-2618">active[sat_id] != -1</label>
			<label kind="assignment" x="-2754" y="-2601">startNew()</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-2839" y="-2652">request[sat_id]?</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-2932" y="-2745">release[sat_id]!</label>
			<label kind="assignment" x="-2932" y="-2728">active[sat_id] = -1</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-2448" y="-2881">release[sat_id]!</label>
			<label kind="assignment" x="-2448" y="-2864">delayed(task)</label>
			<nail x="-2643" y="-2864"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id22"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id20"/>
			<label kind="guard" x="-2448" y="-2771">task == RECEIVE_INDEX ||
task == TRANSMIT_INDEX</label>
			<label kind="synchronisation" x="-2414" y="-2737">release[sat_id]?</label>
			<nail x="-2414" y="-2660"/>
			<nail x="-2414" y="-2779"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-2396" y="-2813">release[sat_id]?</label>
			<nail x="-2227" y="-2796"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id19"/>
			<label kind="guard" x="-2311" y="-2838">exe_time &gt;= getDeadline()</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id21"/>
			<label kind="guard" x="-2397" y="-2541">activeIsTrans()</label>
			<nail x="-2643" y="-2524"/>
			<nail x="-2218" y="-2524"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-2354" y="-2643">request[sat_id]?</label>
			<label kind="assignment" x="-2354" y="-2618">exe_time = 0,
sch_start()</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id18"/>
			<label kind="assignment" x="-2813" y="-2822">resetPriority()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="-2745" y="-2771">exe_time &gt;= 
getDeadline() &amp;&amp; 
exe_time  &lt; 
getExeTime()</label>
			<label kind="assignment" x="-2745" y="-2694">delayed(task)</label>
			<nail x="-2643" y="-2677"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="-2618" y="-2754">exe_time == getExeTime()</label>
			<label kind="assignment" x="-2584" y="-2737">update_storage(task),
reportDone(),
sch_end()</label>
			<nail x="-2490" y="-2762"/>
			<nail x="-2601" y="-2762"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id23"/>
			<label kind="guard" x="-2618" y="-2618">!activeIsTrans()</label>
			<label kind="assignment" x="-2601" y="-2601">sch_start()</label>
		</transition>
	</template>
	<template>
		<name>Satellite</name>
		<parameter>const id_s sat_id</parameter>
		<declaration>clock loc_time;
int selected = -1;

/** Change satellite orientation */
void turn_satellite(){
	if (sats[sat_id].rotation &lt; jobs[active[sat_id]].orientation){sats[sat_id].rotation ++;}
	else if (sats[sat_id].rotation &gt; jobs[active[sat_id]].orientation){sats[sat_id].rotation --;}
}

/** Suggest a new task to execute */
void suggest_task(){
	int i, j, k, count = 0, high = 0;
	selected = -1;

	for (i = 0; i &lt; N - 1; i++) {
		if (sats[sat_id].available_tasks[i]) {
			if (sats[sat_id].memory &lt;= LOW_MEMORY ) {
				if (jobs[i].data_rate &gt; 0) {
					if (priorities[sat_id][i]*2 &lt;= 100) {
						priorities[sat_id][i] = priorities[sat_id][i] * 2; 
					}
					else {
						priorities[sat_id][i] = 100;
					}
				}
				else if (jobs[i].data_rate &lt; 0) {
					priorities[sat_id][i] = 0;
				}
			}
			else if (sats[sat_id].memory &gt;= HIGH_MEMORY) {
				if (jobs[i].data_rate &lt; 0) {
					if (priorities[sat_id][i]*2 &lt;= 100) {
						priorities[sat_id][i] = priorities[sat_id][i] * 2; 
					}
					else {
						priorities[sat_id][i] = 100;
					}
				}
				else if (jobs[i].data_rate &gt; 0) {
					priorities[sat_id][i] = 0;
				} 
			}
		}
	}

	//TODO make logic for handeling ties
	for (i = 0; i &lt; N - 1; i++) {
		if (sats[sat_id].available_tasks[i] &amp;&amp; priorities[sat_id][i] &gt; high) {
			if(i != RECEIVE_INDEX ) {  // it is invalid to suggest a reeive task (It's the transferee that takes initiatve)
				selected = i;
				high = priorities[sat_id][i];
			}
		}
	}
	sats[sat_id].suggested_task = selected;
}
</declaration>
		<location id="id25" x="-216" y="-576">
			<urgent/>
		</location>
		<location id="id26" x="-756" y="-578">
			<name x="-804" y="-586">Start</name>
			<label kind="invariant" x="-807" y="-631">t_time &lt;= 
sats[sat_id].offset</label>
		</location>
		<location id="id27" x="-216" y="-464">
			<name x="-256" y="-456">Checking</name>
			<urgent/>
		</location>
		<location id="id28" x="-528" y="-464">
			<name x="-595" y="-476">Waiting</name>
			<label kind="invariant" x="-680" y="-450">loc_time &lt;= TASK_SUGGEST_INTERVAL</label>
		</location>
		<init ref="id26"/>
		<transition>
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-504" y="-600">!validSuggestion(sat_id)</label>
			<nail x="-528" y="-576"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-496" y="-576">validSuggestion(sat_id)</label>
			<label kind="synchronisation" x="-496" y="-552">add_task[sat_id]!</label>
			<nail x="-288" y="-552"/>
			<nail x="-512" y="-552"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id28"/>
			<label kind="guard" x="-680" y="-620">t_time &gt;= 
sats[sat_id].offset</label>
			<label kind="assignment" x="-680" y="-578">loc_time = 0,
in_orbit[sat_id] = true</label>
			<nail x="-552" y="-576"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="assignment" x="-312" y="-536">loc_time = 0,
suggest_task()</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="guard" x="-501" y="-501">loc_time &gt;= TASK_SUGGEST_INTERVAL</label>
			<label kind="synchronisation" x="-399" y="-484">find_new!</label>
			<label kind="assignment" x="-399" y="-459">RQ = sat_id,
sch_time[sat_id] += 2</label>
		</transition>
	</template>
	<template>
		<name>CheckRunnable</name>
		<declaration>bool all_checked = false;
int window_to_check = 0, task_to_check = 0;
int station = 0;
bool station_to_check = false;
bool can_run = false;
int index[S][STATIONS] = {{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
                          {0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}};

void overStation(){
    if (OVER_STATION[index[RQ][window_to_check]][window_to_check][2]) {
        runnable[task_to_check] = true;
        win_active[window_to_check] = true;
    }
}

void next() {
    if (task_to_check &lt; N) {
        if (window_to_check &lt; STATIONS-1) {
            window_to_check++;
        }
        else {
            task_to_check ++;
            window_to_check = 0;     
        }
    }
    else {
        all_checked = true;
        task_to_check = 0;
        window_to_check = 0;
    }
}


void resetRunnable() {
	int i, s;
	for (i = 0; i &lt; N; i++) {
		runnable[i] = false;
	}
    for (i = 0; i &lt; STATIONS; i++){win_active[i] = false;}
}


bool independent() {
	int i = 0, count = 0;
	
	for (i = 0; i &lt; STATIONS; i++){
		if (!jobs[task_to_check].depend_station[i]) {
			count ++;
		}
		if (count == STATIONS) {
			return true;
		}
	}
	return false;
}

void allTaskChecked(){
	if (task_to_check +1 == N){
		all_checked = true;
		task_to_check = 0;
		window_to_check = 0;
	}
    else task_to_check += 1;
}

void skipWindowCheck() {
	runnable[task_to_check] = true;

}

int windowEnd() {
	return OVER_STATION[index[RQ][window_to_check]][window_to_check][1];
}

int windowStart() {
    return OVER_STATION[index[RQ][window_to_check]][window_to_check][0];
}

bool depends() {
	return jobs[task_to_check].depend_station[window_to_check];
}

//TODO overhold at vi ikke går ud over et vindue</declaration>
		<location id="id29" x="102" y="-212">
			<committed/>
		</location>
		<location id="id30" x="-306" y="-357">
			<name x="-316" y="-387">Wait</name>
		</location>
		<location id="id31" x="-306" y="-212">
			<committed/>
		</location>
		<init ref="id30"/>
		<transition>
			<source ref="id29"/>
			<target ref="id29"/>
			<label kind="guard" x="136" y="-408">windowEnd() &gt;= t_time - sats[RQ].offset &amp;&amp;
windowEnd() &lt; t_time - sats[RQ].offset +
jobs[task_to_check].execution_time 
&amp;&amp; windowStart() &lt;= t_time - sats[RQ].offset
&amp;&amp; station_to_check</label>
			<label kind="assignment" x="136" y="-314">station_to_check = false</label>
			<nail x="68" y="-383"/>
			<nail x="127" y="-383"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id31"/>
			<label kind="guard" x="-195" y="-170">!station_to_check</label>
			<label kind="assignment" x="-195" y="-153">next()</label>
			<nail x="25" y="-153"/>
			<nail x="-238" y="-153"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id29"/>
			<label kind="guard" x="136" y="-263">windowEnd() &lt; t_time - sats[RQ].offset
&amp;&amp; index[RQ][window_to_check] &lt; STATION_INDEX-1</label>
			<label kind="assignment" x="280" y="-212">index[RQ][window_to_check]++</label>
			<nail x="450" y="-212"/>
			<nail x="450" y="-169"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id29"/>
			<label kind="guard" x="144" y="-136">windowEnd() &gt;= t_time - sats[RQ].offset +
jobs[task_to_check].execution_time  &amp;&amp;
windowStart() &lt;= t_time - sats[RQ].offset
&amp;&amp; station_to_check</label>
			<label kind="assignment" x="144" y="-59">station_to_check = false,
overStation()</label>
			<nail x="136" y="-25"/>
			<nail x="85" y="-25"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id31"/>
			<label kind="guard" x="-382" y="-161">independent()</label>
			<label kind="assignment" x="-399" y="-144">skipWindowCheck(),
allTaskChecked()</label>
			<nail x="-370" y="-196"/>
			<nail x="-346" y="-156"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-391" y="-306">check?</label>
			<label kind="assignment" x="-433" y="-289">resetRunnable()</label>
			<nail x="-399" y="-357"/>
			<nail x="-399" y="-212"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id31"/>
			<label kind="guard" x="-289" y="-272">!depends() &amp;&amp; !independent()</label>
			<label kind="assignment" x="-289" y="-255">next()</label>
			<nail x="-212" y="-255"/>
			<nail x="-204" y="-229"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id29"/>
			<label kind="guard" x="-178" y="-246">!all_checked &amp;&amp; !independent() &amp;&amp;
depends()</label>
			<label kind="assignment" x="-288" y="-212">station_to_check = true</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="guard" x="-297" y="-331">all_checked</label>
			<label kind="synchronisation" x="-297" y="-314">check!</label>
			<label kind="assignment" x="-297" y="-297">all_checked = false</label>
		</transition>
	</template>
	<system>p0 = Processor(0);s0 = Satellite(0);sc0 = Scheduler(0);
p1 = Processor(1);s1 = Satellite(1);sc1 = Scheduler(1);
p2 = Processor(2);s2 = Satellite(2);sc2 = Scheduler(2);
p3 = Processor(3);s3 = Satellite(3);sc3 = Scheduler(3);
p4 = Processor(4);s4 = Satellite(4);sc4 = Scheduler(4);
p5 = Processor(5);s5 = Satellite(5);sc5 = Scheduler(5);
p6 = Processor(6);s6 = Satellite(6);sc6 = Scheduler(6);
p7 = Processor(7);s7 = Satellite(7);sc7 = Scheduler(7);
p8 = Processor(8);s8 = Satellite(8);sc8 = Scheduler(8);
p9 = Processor(9);s9 = Satellite(9);sc9 = Scheduler(9);
p10 = Processor(10);s10 = Satellite(10);sc10 = Scheduler(10);
p11 = Processor(11);s11 = Satellite(11);sc11 = Scheduler(11);
p12 = Processor(12);s12 = Satellite(12);sc12 = Scheduler(12);
p13 = Processor(13);s13 = Satellite(13);sc13 = Scheduler(13);
p14 = Processor(14);s14 = Satellite(14);sc14 = Scheduler(14);
p15 = Processor(15);s15 = Satellite(15);sc15 = Scheduler(15);
p16 = Processor(16);s16 = Satellite(16);sc16 = Scheduler(16);
p17 = Processor(17);s17 = Satellite(17);sc17 = Scheduler(17);
p18 = Processor(18);s18 = Satellite(18);sc18 = Scheduler(18);
p19 = Processor(19);s19 = Satellite(19);sc19 = Scheduler(19);
p20 = Processor(20);s20 = Satellite(20);sc20 = Scheduler(20);
p21 = Processor(21);s21 = Satellite(21);sc21 = Scheduler(21);
p22 = Processor(22);s22 = Satellite(22);sc22 = Scheduler(22);
p23 = Processor(23);s23 = Satellite(23);sc23 = Scheduler(23);
p24 = Processor(24);s24 = Satellite(24);sc24 = Scheduler(24);
p25 = Processor(25);s25 = Satellite(25);sc25 = Scheduler(25);
p26 = Processor(26);s26 = Satellite(26);sc26 = Scheduler(26);
p27 = Processor(27);s27 = Satellite(27);sc27 = Scheduler(27);
p28 = Processor(28);s28 = Satellite(28);sc28 = Scheduler(28);
p29 = Processor(29);s29 = Satellite(29);sc29 = Scheduler(29);

system CheckRunnable &lt; sc0 &lt;
sc1 &lt;
sc2 &lt;
sc3 &lt;
sc4 &lt;
sc5 &lt;
sc6 &lt;
sc7 &lt;
sc8 &lt;
sc9 &lt;
sc10 &lt;
sc11 &lt;
sc12 &lt;
sc13 &lt;
sc14 &lt;
sc15 &lt;
sc16 &lt;
sc17 &lt;
sc18 &lt;
sc19 &lt;
sc20 &lt;
sc21 &lt;
sc22 &lt;
sc23 &lt;
sc24 &lt;
sc25 &lt;
sc26 &lt;
sc27 &lt;
sc28 &lt;
sc29 &lt;
s0 &lt;
s1 &lt;
s2 &lt;
s3 &lt;
s4 &lt;
s5 &lt;
s6 &lt;
s7 &lt;
s8 &lt;
s9 &lt;
s10 &lt;
s11 &lt;
s12 &lt;
s13 &lt;
s14 &lt;
s15 &lt;
s16 &lt;
s17 &lt;
s18 &lt;
s19 &lt;
s20 &lt;
s21 &lt;
s22 &lt;
s23 &lt;
s24 &lt;
s25 &lt;
s26 &lt;
s27 &lt;
s28 &lt;
s29 &lt;
p0 &lt;
p1 &lt;
p2 &lt;
p3 &lt;
p4 &lt;
p5 &lt;
p6 &lt;
p7 &lt;
p8 &lt;
p9 &lt;
p10 &lt;
p11 &lt;
p12 &lt;
p13 &lt;
p14 &lt;
p15 &lt;
p16 &lt;
p17 &lt;
p18 &lt;
p19 &lt;
p20 &lt;
p21 &lt;
p22 &lt;
p23 &lt;
p24 &lt;
p25 &lt;
p26 &lt;
p27 &lt;
p28 &lt;
p29;

gantt{
Occupied0: p0.Occupied -&gt; active[0];
Occupied1: p1.Occupied -&gt; active[1];
Occupied2: p2.Occupied -&gt; active[2];
Occupied3: p3.Occupied -&gt; active[3];
Occupied4: p4.Occupied -&gt; active[4];
Occupied5: p5.Occupied -&gt; active[5];
Occupied6: p6.Occupied -&gt; active[6];
Occupied7: p7.Occupied -&gt; active[7];
Occupied8: p8.Occupied -&gt; active[8];
Occupied9: p9.Occupied -&gt; active[9];
Occupied10: p10.Occupied -&gt; active[10];
Occupied11: p11.Occupied -&gt; active[11];
Occupied12: p12.Occupied -&gt; active[12];
Occupied13: p13.Occupied -&gt; active[13];
Occupied14: p14.Occupied -&gt; active[14];
Occupied15: p15.Occupied -&gt; active[15];
Occupied16: p16.Occupied -&gt; active[16];
Occupied17: p17.Occupied -&gt; active[17];
Occupied18: p18.Occupied -&gt; active[18];
Occupied19: p19.Occupied -&gt; active[19];
Occupied20: p20.Occupied -&gt; active[20];
Occupied21: p21.Occupied -&gt; active[21];
Occupied22: p22.Occupied -&gt; active[22];
Occupied23: p23.Occupied -&gt; active[23];
Occupied24: p24.Occupied -&gt; active[24];
Occupied25: p25.Occupied -&gt; active[25];
Occupied26: p26.Occupied -&gt; active[26];
Occupied27: p27.Occupied -&gt; active[27];
Occupied28: p28.Occupied -&gt; active[28];
Occupied29: p29.Occupied -&gt; active[29];


}

</system>
	<queries>
		<query>
			<formula>E&lt;&gt; (sc0.Occupied &amp;&amp; active[0] == -1) ||
(sc1.Occupied &amp;&amp; active[1] == -1) ||
(sc2.Occupied &amp;&amp; active[2] == -1) ||
(sc3.Occupied &amp;&amp; active[3] == -1) ||
(sc4.Occupied &amp;&amp; active[4] == -1) ||
(sc5.Occupied &amp;&amp; active[5] == -1) ||
(sc6.Occupied &amp;&amp; active[6] == -1) ||
(sc7.Occupied &amp;&amp; active[7] == -1) ||
(sc8.Occupied &amp;&amp; active[8] == -1) ||
(sc9.Occupied &amp;&amp; active[9] == -1) ||
(sc10.Occupied &amp;&amp; active[10] == -1) ||
(sc11.Occupied &amp;&amp; active[11] == -1) ||
(sc12.Occupied &amp;&amp; active[12] == -1) ||
(sc13.Occupied &amp;&amp; active[13] == -1) ||
(sc14.Occupied &amp;&amp; active[14] == -1) ||
(sc15.Occupied &amp;&amp; active[15] == -1) ||
(sc16.Occupied &amp;&amp; active[16] == -1) ||
(sc17.Occupied &amp;&amp; active[17] == -1) ||
(sc18.Occupied &amp;&amp; active[18] == -1) ||
(sc19.Occupied &amp;&amp; active[19] == -1) ||
(sc20.Occupied &amp;&amp; active[20] == -1) ||
(sc21.Occupied &amp;&amp; active[21] == -1) ||
(sc22.Occupied &amp;&amp; active[22] == -1) ||
(sc23.Occupied &amp;&amp; active[23] == -1) ||
(sc24.Occupied &amp;&amp; active[24] == -1) ||
(sc25.Occupied &amp;&amp; active[25] == -1) ||
(sc26.Occupied &amp;&amp; active[26] == -1) ||
(sc27.Occupied &amp;&amp; active[27] == -1) ||
(sc28.Occupied &amp;&amp; active[28] == -1) ||
(sc29.Occupied &amp;&amp; active[29] == -1)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; p1.ERROR || p2.ERROR || p0.ERROR|| p3.ERROR|| p4.ERROR|| p6.ERROR || p8.ERROR || p10.ERROR
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; t_time &gt;= 100
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
