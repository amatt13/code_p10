<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>const int N = 3; // slew, internal comm., collect data, send data, receive msg.
const int S = 1;
const int R = 2;
const int W = 2;
const int ScheduleLength = 360;

bool win_active[W] = {0, 0};
const int Window[W][2] = {{50, 80}, {10, 30}};
const bool RunInWindow[W][N] = {{1, 0, 0},{0, 1, 1}};

typedef int[0, N-1] id_t;
typedef int[0, R-1] id_r;
typedef int[0, S-1] id_s;
typedef int[0, W-1] id_w;

const int OrbitTime = 90;
const int max_memory = 50;

clock orbit_time[S];
clock t_time;
 
broadcast chan ready, run, win;
urgent broadcast chan release[S][N], request[S][R], grant[S][N], preemt[N];
 

int runs[N][N] 	     = {{0,0,0},{0,0,0},{0,0,0}};
bool available[N][N] = {{0,0,0},{0,0,0},{0,0,0}};
bool runnable[N][N]  = {{0,0,0},{0,0,0},{0,0,0}};
 

/** Task Description */
typedef struct {
	//const int depend_task[N];
	bool depend_win[W];
	int execution_time;
	int deadline;
	int prio;
	int data_rate;
	bool has_cost;
	int orientation;
	int res;
} TaskDescription;

/** Satellite Description */
typedef struct {
	int offset;
	int rotation;
	int memory;
	bool can_does[N];
} SatDescription;

/** Satellite Description */
typedef struct {
	int start_time;
	int end_time;
	int price_rate;
} WindowDescription;


const TaskDescription send_msg = {{0,1}, 10,16, 3, -5, true, 2, 0};
const TaskDescription rec_msg = {{1,0}, 12,20, 5, 1, true, 1, 1};
const TaskDescription slew = {{0,0}, 3,5, 1, 0, false, 0, -1};
const TaskDescription jobs[N] = {send_msg, rec_msg, slew};

const SatDescription satA = {10, 0, 15, {1,1,1}};
const SatDescription satB = {50, 1, 50, {1,0,1}};
SatDescription sats[S] = {satA};


const WindowDescription win1 = {40, 80, 13}; 
const WindowDescription win2 = {10, 30, 8};
WindowDescription wins[W] = {win1, win2};


bool empty(int q[N]){
	int i = 0;
	for (i = 0; i &lt; N; i++){
	if(q[i] != 0){
		return false;
	}
	}
	return true;
}

const int prioritys[N] = {jobs[0].prio,jobs[1].prio,jobs[2].prio};
bool running[N] = {0,0,0};
int active[S] = {0};

</declaration><template><name>PayloadWindow</name><parameter>const id_w id</parameter><declaration>clock wtime;          
void alwaysAvailable() { 
        int i = 0; int count = 0; int j=0;
        for(i=0;i &lt; N;i++){
	for (j = 0; j &lt; N; j++){ 
        	if(available[i][j] == 1){count++;}}}
        if(count == 0){
        	for(i = 0; i &lt; N; i++){
	for (j = 0; j &lt; N; j++){ 
          	if(RunInWindow[id][i] == 0){
          	available[i][j] = 1;}}}}
          	else{
          		for(i = 0; i &lt; N; i++){
		for (j = 0; j &lt; N; j++){ 
          		if(RunInWindow[id][i] == 0 &amp;&amp; available[i][j] == 1){available[i][j] = 1;} 
          		else{ available[i][j] = 0;}}}}}

//   satellite offset skal inkluderes i vinduer     
void setRunnable(){ 
          int i= 0; int j=0;
          for (i = 0; i &lt; N; i++){
	  for (j = 0; j &lt; N; j++){ 
          if(RunInWindow[id][i] == 1){ 
          available[i][j] = 1; }}}}
         
void removeRunnable(){
          int i= 0;  int j=0;
          for (i = 0; i &lt; N; i++){ 
	  for (j = 0; j &lt; N; j++){ 
          if(RunInWindow[id][i] == 1){ 
          available[i][j] = 0;}}}}</declaration><location id="id0" x="-40" y="16"><committed/></location><location id="id1" x="104" y="16"><name x="80" y="-16">NotIn</name><label kind="invariant" x="24" y="-32">wtime &lt;= Window[id][0]</label></location><location id="id2" x="232" y="272"><label kind="invariant" x="222" y="287">wtime &lt;= OrbitTime</label></location><location id="id3" x="392" y="16"><name x="382" y="-14">In</name><label kind="invariant" x="288" y="-24">wtime &lt;= Window[id][1]</label></location><init ref="id0"/><transition><source ref="id2"/><target ref="id1"/><label kind="guard" x="16" y="128">wtime &gt;= OrbitTime</label><label kind="assignment" x="88" y="144">wtime = 0</label></transition><transition><source ref="id0"/><target ref="id1"/><label kind="assignment" x="-32" y="24">alwaysAvailable()</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="guard" x="320" y="128">wtime &gt;= Window[id][1]</label><label kind="synchronisation" x="304" y="160">win!</label><label kind="assignment" x="312" y="144">removeRunnable()</label></transition><transition><source ref="id1"/><target ref="id3"/><label kind="guard" x="152" y="0">wtime &gt;= Window[id][0]</label><label kind="synchronisation" x="216" y="32">win!</label><label kind="assignment" x="184" y="16">setRunnable()</label></transition></template><template><name>PreemptiveScheduler</name><parameter>const id_s sat_id</parameter><declaration>bool queue[N] = {0,0,0};
int task = 0;

void enqueue(int task){
	// do stuff with queue
	int i = N-1;
	for (i = N-1; i &gt;= 0; i--){
	
	}
}

void dequeue(int task){
	// do suff with queue
}</declaration><location id="id4" x="112" y="304"><name x="88" y="320">Preempt</name><committed/></location><location id="id5" x="112" y="-88"><name x="88" y="-72">Release</name><committed/></location><location id="id6" x="112" y="72"><name x="102" y="42">Occupied</name></location><location id="id7" x="-160" y="72"><committed/></location><location id="id8" x="-160" y="-88"><name x="-176" y="-120">Start</name></location><init ref="id8"/><transition><source ref="id4"/><target ref="id7"/><label kind="guard" x="-152" y="208">prioritys[queue[0]] &gt; prioritys[active[sat_id]]</label><label kind="synchronisation" x="-152" y="240">preemt[active[sat_id]]!</label><label kind="assignment" x="-152" y="272">running[active[sat_id]] = false,
active[sat_id] = queue[0]</label><nail x="-160" y="304"/></transition><transition><source ref="id5"/><target ref="id8"/><label kind="guard" x="-80" y="-104">empty(queue)</label><label kind="assignment" x="-80" y="-88">active[sat_id] = 0</label></transition><transition><source ref="id4"/><target ref="id6"/><label kind="guard" x="248" y="176">prioritys[queue[0] ] &lt;= prioritys[active[sat_id]]</label><nail x="240" y="184"/></transition><transition><source ref="id5"/><target ref="id7"/><label kind="guard" x="-72" y="-32">!empty(queue)</label><label kind="assignment" x="-72" y="-16">active[sat_id] = queue[0]</label></transition><transition><source ref="id6"/><target ref="id4"/><label kind="synchronisation" x="48" y="160">request[sat_id][task]?</label><label kind="assignment" x="52" y="188">enqueue(task)</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="120" y="-31">release[sat_id][task]?</label><label kind="assignment" x="120" y="0">running[task] = false,
dequeue(task)</label></transition><transition><source ref="id7"/><target ref="id6"/><label kind="synchronisation" x="-120" y="56">grant[sat_id][active[sat_id]]!</label><label kind="assignment" x="-120" y="88">running[active[sat_id]] = true</label></transition><transition><source ref="id8"/><target ref="id7"/><label kind="synchronisation" x="-328" y="-48">request[sat_id][jobs[active[sat_id]].res]?</label><label kind="assignment" x="-328" y="-8">enqueue(active[sat_id]),
task = active[sat_id]</label></transition></template><template><name>Resource</name><parameter>const id_s sat_id, const id_r res_id</parameter><declaration>int waiting[N] = {0,0,0};
int task = res_id;

void unlockInheritance(int res_id, int task){}



void dequeue(int task){
	// use waiting
}



void enqueue(int task){// use waiting
}

void lockInheritance(int res_id, int active){}

void boostPriority(int res_id, int task_id){
	//priority = preemting task priority + 1
}

</declaration><location id="id9" x="-288" y="96"><name x="-272" y="80">Occupied</name></location><location id="id10" x="64" y="96"><name x="48" y="64">Block</name><committed/></location><location id="id11" x="-288" y="-160"><name x="-296" y="-192">Unblock</name><committed/></location><location id="id12" x="-480" y="96"><name x="-472" y="72">Free</name></location><init ref="id12"/><transition><source ref="id11"/><target ref="id12"/><label kind="guard" x="-472" y="-152">empty(waiting)</label><nail x="-480" y="-160"/></transition><transition><source ref="id11"/><target ref="id9"/><label kind="guard" x="-104" y="-96">!empty(waiting)</label><label kind="synchronisation" x="-104" y="-80">request[sat_id][waiting[0] ]!</label><label kind="assignment" x="-104" y="-56">active[sat_id] = waiting[0],
lockInheritance(sat_id, active)</label><nail x="-48" y="-160"/></transition><transition><source ref="id9"/><target ref="id11"/><label kind="synchronisation" x="-376" y="-96">release[sat_id][task]?</label><label kind="assignment" x="-376" y="-64">unlockInheritance(sat_id, task),
dequeue(task)</label></transition><transition><source ref="id10"/><target ref="id9"/><label kind="synchronisation" x="-168" y="192">release[res_id][task]!</label><nail x="-96" y="184"/></transition><transition><source ref="id9"/><target ref="id10"/><label kind="synchronisation" x="-176" y="32">request[sat_id][task]?</label><label kind="assignment" x="-176" y="56">enqueue(task),
boostPriority(sat_id, task)</label></transition><transition><source ref="id12"/><target ref="id9"/><label kind="synchronisation" x="-464" y="120">request[sat_id][task]?</label><label kind="assignment" x="-464" y="152">enqueue(task),
active[sat_id] = waiting[0],
lockInheritance(sat_id, active)</label></transition></template><template><name>Satellite</name><parameter>const id_s sat_id</parameter><declaration>clock run_time, exe_time, slew;
int task = 0;
int price = 0;
bool is_queued[N] = {0,0,0};

void select_task(int time_now){
	int i = 0; int j = 0; int selected = 0; int count = 0; int high = -1;
	bool runnable[N] = {0,0,0};
// check if window ends before deadline
	for (i = 0; i &lt; N; i++){
	if (sats[sat_id].can_does[i] == 1){
	for (j = 0; j &lt; W; j++){
		if (jobs[i].depend_win[j] == 0){count ++;}
		if (count == W) {runnable[i] = true;}
	}
	if (runnable[i] == true){}
	else {
	for (j = 0 ;j &lt; W; j++){
		if(!runnable[i] &amp;&amp; time_now &gt;= wins[j].start_time &amp;&amp; time_now &lt;= wins[j].end_time){
			runnable[i] = true;
		}
	}}}}
// make logic for handeling ties
	for (i = 0; i &lt; N; i++){
		if (runnable[i] == 1 &amp;&amp; jobs[i].prio &gt; high){
			selected = i;
			high = jobs[i].prio;
		}
	}
// håndter at intet er runnable

	//active[sat_id] = selected;
	task = selected;
	is_queued[task] = true;

}

void update_storage(int time){
	sats[sat_id].memory += time * jobs[active[sat_id]].data_rate;
}
bool rotation(){
	if (jobs[active[sat_id]].orientation != 0){
		if (sats[sat_id].rotation != jobs[task].orientation){return false;}
		else {return true;}}
	else {return true;}
}

void turn_satellite(){
	if (jobs[active[sat_id]].orientation != 0){
	if (sats[sat_id].rotation &lt; jobs[task].orientation){sats[sat_id].rotation ++;}
	else if (sats[sat_id].rotation &gt; jobs[task].orientation){sats[sat_id].rotation --;}}
}

int calc_cost(){
// TODO: Håndter overlappende vinduer
	int i = 0; int price = 0;
	for (i = 0; i &lt; W-1; i++){
	if(jobs[active[sat_id]].depend_win[i] == 1 &amp;&amp; win_active[i] == 1){
		if (wins[i].price_rate * jobs[active[sat_id]].has_cost != 0){	
		price = wins[i].price_rate;
		}
	}
	}
	return price;
}</declaration><location id="id13" x="-184" y="-128"><committed/></location><location id="id14" x="240" y="48"><name x="256" y="16">Slewing</name><label kind="invariant" x="152" y="16">slew &lt;= 3</label></location><location id="id15" x="40" y="-128"><name x="30" y="-158">Ready</name></location><location id="id16" x="-416" y="48"><committed/></location><location id="id17" x="40" y="48"><name x="48" y="16">Running</name><label kind="invariant" x="-136" y="104">run_time  &lt;= jobs[task].deadline &amp;&amp;
exe_time  &lt;= jobs[task].execution_time &amp;&amp;
cost' == calc_cost()</label></location><location id="id18" x="-416" y="-128"><name x="-448" y="-152">Idle</name></location><location id="id19" x="-416" y="-240"><name x="-432" y="-272">Start</name><label kind="invariant" x="-520" y="-224">orbit_time[sat_id] &lt;= sats[sat_id].offset</label></location><init ref="id19"/><transition><source ref="id18"/><target ref="id17"/><label kind="guard" x="-440" y="120">rotation()</label><label kind="synchronisation" x="-440" y="136">grant[sat_id][jobs[sat_id].res]?</label><nail x="-440" y="-128"/><nail x="-440" y="152"/><nail x="40" y="152"/></transition><transition><source ref="id18"/><target ref="id14"/><label kind="guard" x="-392" y="176">!rotation()</label><label kind="synchronisation" x="-392" y="192">grant[sat_id][jobs[sat_id].res]?</label><nail x="-448" y="-128"/><nail x="-448" y="160"/><nail x="240" y="160"/></transition><transition><source ref="id14"/><target ref="id16"/><label kind="guard" x="-320" y="-64">run_time  &gt;= jobs[task].deadline</label><label kind="assignment" x="-296" y="-48">update_storage(exe_time)</label><nail x="-216" y="-40"/></transition><transition><source ref="id14"/><target ref="id14"/><label kind="guard" x="216" y="72">!rotation() &amp;&amp; slew &gt;= 3</label><label kind="assignment" x="264" y="120">turn_satellite(),
slew = 0</label><nail x="304" y="48"/><nail x="304" y="72"/></transition><transition><source ref="id13"/><target ref="id15"/><label kind="synchronisation" x="-192" y="-168">request[sat_id][jobs[task].res]!</label></transition><transition><source ref="id14"/><target ref="id17"/><label kind="guard" x="96" y="32">rotation()</label><label kind="assignment" x="80" y="48">exe_time = 0</label></transition><transition><source ref="id15"/><target ref="id14"/><label kind="guard" x="112" y="-152">!rotation()</label><label kind="synchronisation" x="56" y="-128">grant[sat_id][jobs[sat_id].res]?</label><label kind="assignment" x="248" y="-48">exe_time = 0,
slew = 0</label><nail x="240" y="-128"/></transition><transition><source ref="id17"/><target ref="id16"/><label kind="guard" x="-272" y="0">run_time &gt;= jobs[task].deadline &amp;&amp;
exe_time  &lt; jobs[task].execution_time</label><nail x="-216" y="-16"/></transition><transition><source ref="id16"/><target ref="id18"/><label kind="synchronisation" x="-520" y="-40">release[sat_id][jobs[task].res]!</label></transition><transition><source ref="id17"/><target ref="id16"/><label kind="guard" x="-376" y="56">exe_time  == jobs[task].execution_time</label><label kind="assignment" x="-296" y="72">runs[sat_id][task] ++,
update_storage(exe_time)</label></transition><transition><source ref="id15"/><target ref="id17"/><label kind="guard" x="48" y="-88">rotation()</label><label kind="synchronisation" x="48" y="-72">grant[sat_id][jobs[sat_id].res]?</label><label kind="assignment" x="48" y="-56">exe_time = 0</label></transition><transition><source ref="id18"/><target ref="id13"/><label kind="assignment" x="-400" y="-120">select_task(orbit_time[sat_id]),
run_time = 0</label></transition><transition><source ref="id19"/><target ref="id18"/><label kind="guard" x="-520" y="-184">orbit_time[sat_id] &gt;= sats[sat_id].offset</label></transition></template><template><name>OrbitTimer</name><parameter>const id_s sat_id</parameter><location id="id20" x="-400" y="-616"><label kind="invariant" x="-520" y="-600">orbit_time[sat_id] &lt;= sats[sat_id].offset</label></location><location id="id21" x="-208" y="-616"><label kind="invariant" x="-296" y="-664">orbit_time[sat_id] &lt;= OrbitTime</label></location><init ref="id20"/><transition><source ref="id20"/><target ref="id21"/><label kind="guard" x="-512" y="-648">orbit_time[sat_id] &gt;= sats[sat_id].offset</label><label kind="assignment" x="-384" y="-616">orbit_time[sat_id] = 0</label></transition><transition><source ref="id21"/><target ref="id21"/><label kind="guard" x="-296" y="-544">orbit_time[sat_id] &gt;= OrbitTime</label><label kind="assignment" x="-264" y="-512">orbit_time[sat_id] = 0</label><nail x="-144" y="-552"/><nail x="-264" y="-552"/></transition></template><system>system OrbitTimer, PreemptiveScheduler, Resource, Satellite;</system></nta>